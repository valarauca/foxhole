pub mod parser_y {
    #![allow(clippy::type_complexity)]
#[allow(dead_code)] const __GRM_DATA: &[u8] = &[23,0,0,0,23,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,94,13,0,0,0,0,0,0,0,80,114,111,103,114,97,109,80,97,114,115,101,114,11,0,0,0,0,0,0,0,83,116,116,109,110,116,115,67,111,108,108,7,0,0,0,0,0,0,0,83,116,116,109,110,116,115,6,0,0,0,0,0,0,0,83,116,116,109,110,116,4,0,0,0,0,0,0,0,84,101,114,109,4,0,0,0,0,0,0,0,69,120,112,114,4,0,0,0,0,0,0,0,67,111,110,100,10,0,0,0,0,0,0,0,65,115,115,105,103,110,109,101,110,116,10,0,0,0,0,0,0,0,68,101,99,70,117,110,99,65,114,103,14,0,0,0,0,0,0,0,70,117,110,99,65,114,103,68,101,99,76,105,115,116,11,0,0,0,0,0,0,0,68,101,99,70,117,110,99,65,114,103,115,7,0,0,0,0,0,0,0,68,101,99,70,117,110,99,4,0,0,0,0,0,0,0,70,117,110,99,8,0,0,0,0,0,0,0,70,117,110,99,65,114,103,115,7,0,0,0,0,0,0,0,65,114,103,76,105,115,116,6,0,0,0,0,0,0,0,68,101,99,67,109,112,7,0,0,0,0,0,0,0,67,111,109,112,65,114,103,3,0,0,0,0,0,0,0,78,117,109,4,0,0,0,0,0,0,0,66,111,111,108,10,0,0,0,0,0,0,0,73,100,101,110,116,105,102,105,101,114,11,0,0,0,0,0,0,0,84,101,109,112,108,97,116,101,86,97,114,8,0,0,0,0,0,0,0,84,121,112,101,73,110,102,111,39,0,0,0,0,0,0,0,1,4,0,0,0,0,0,0,0,83,69,77,73,1,3,0,0,0,0,0,0,0,65,68,68,1,3,0,0,0,0,0,0,0,83,85,66,1,3,0,0,0,0,0,0,0,77,85,76,1,3,0,0,0,0,0,0,0,68,73,86,1,2,0,0,0,0,0,0,0,69,81,1,2,0,0,0,0,0,0,0,78,69,1,2,0,0,0,0,0,0,0,71,84,1,2,0,0,0,0,0,0,0,76,84,1,2,0,0,0,0,0,0,0,71,69,1,2,0,0,0,0,0,0,0,76,69,1,3,0,0,0,0,0,0,0,65,78,68,1,2,0,0,0,0,0,0,0,79,82,1,3,0,0,0,0,0,0,0,88,79,82,1,4,0,0,0,0,0,0,0,76,80,65,82,1,4,0,0,0,0,0,0,0,82,80,65,82,1,2,0,0,0,0,0,0,0,73,70,1,6,0,0,0,0,0,0,0,82,66,82,65,67,69,1,6,0,0,0,0,0,0,0,76,66,82,65,67,69,1,4,0,0,0,0,0,0,0,69,76,83,69,1,5,0,0,0,0,0,0,0,67,79,78,83,84,1,5,0,0,0,0,0,0,0,67,79,76,79,78,1,6,0,0,0,0,0,0,0,65,83,83,73,71,78,1,3,0,0,0,0,0,0,0,76,69,84,1,5,0,0,0,0,0,0,0,67,79,77,77,65,1,2,0,0,0,0,0,0,0,70,78,1,4,0,0,0,0,0,0,0,67,79,77,80,1,3,0,0,0,0,0,0,0,78,85,77,1,4,0,0,0,0,0,0,0,84,82,85,69,1,5,0,0,0,0,0,0,0,70,65,76,83,69,1,5,0,0,0,0,0,0,0,73,68,69,78,84,1,14,0,0,0,0,0,0,0,84,69,77,80,76,65,84,69,95,83,84,65,82,84,1,15,0,0,0,0,0,0,0,84,69,77,80,76,65,84,69,95,65,83,83,73,71,78,1,17,0,0,0,0,0,0,0,84,69,77,80,76,65,84,69,95,70,65,76,76,66,65,67,75,1,3,0,0,0,0,0,0,0,73,78,84,1,4,0,0,0,0,0,0,0,66,79,79,76,1,7,0,0,0,0,0,0,0,86,69,67,95,73,78,84,1,8,0,0,0,0,0,0,0,86,69,67,95,66,79,79,76,0,39,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,1,4,0,0,0,0,0,0,0,0,0,0,0,1,5,0,0,0,0,0,0,0,0,0,0,0,1,6,0,0,0,0,0,0,0,0,0,0,0,1,7,0,0,0,0,0,0,0,0,0,0,0,1,8,0,0,0,0,0,0,0,0,0,0,0,1,9,0,0,0,0,0,0,0,0,0,0,0,1,10,0,0,0,0,0,0,0,0,0,0,0,1,11,0,0,0,0,0,0,0,0,0,0,0,1,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,0,0,0,0,1,4,0,0,0,0,0,0,0,83,69,77,73,1,3,0,0,0,0,0,0,0,65,68,68,1,3,0,0,0,0,0,0,0,83,85,66,1,3,0,0,0,0,0,0,0,77,85,76,1,3,0,0,0,0,0,0,0,68,73,86,1,2,0,0,0,0,0,0,0,69,81,1,2,0,0,0,0,0,0,0,78,69,1,2,0,0,0,0,0,0,0,71,84,1,2,0,0,0,0,0,0,0,76,84,1,2,0,0,0,0,0,0,0,71,69,1,2,0,0,0,0,0,0,0,76,69,1,3,0,0,0,0,0,0,0,65,78,68,1,2,0,0,0,0,0,0,0,79,82,1,3,0,0,0,0,0,0,0,88,79,82,1,4,0,0,0,0,0,0,0,76,80,65,82,1,4,0,0,0,0,0,0,0,82,80,65,82,1,2,0,0,0,0,0,0,0,73,70,1,6,0,0,0,0,0,0,0,82,66,82,65,67,69,1,6,0,0,0,0,0,0,0,76,66,82,65,67,69,1,4,0,0,0,0,0,0,0,69,76,83,69,1,5,0,0,0,0,0,0,0,67,79,78,83,84,1,5,0,0,0,0,0,0,0,67,79,76,79,78,1,6,0,0,0,0,0,0,0,65,83,83,73,71,78,1,3,0,0,0,0,0,0,0,76,69,84,1,5,0,0,0,0,0,0,0,67,79,77,77,65,1,2,0,0,0,0,0,0,0,70,78,1,4,0,0,0,0,0,0,0,67,79,77,80,1,3,0,0,0,0,0,0,0,78,85,77,1,4,0,0,0,0,0,0,0,84,82,85,69,1,5,0,0,0,0,0,0,0,70,65,76,83,69,1,5,0,0,0,0,0,0,0,73,68,69,78,84,1,14,0,0,0,0,0,0,0,84,69,77,80,76,65,84,69,95,83,84,65,82,84,1,15,0,0,0,0,0,0,0,84,69,77,80,76,65,84,69,95,65,83,83,73,71,78,1,17,0,0,0,0,0,0,0,84,69,77,80,76,65,84,69,95,70,65,76,76,66,65,67,75,1,3,0,0,0,0,0,0,0,73,78,84,1,4,0,0,0,0,0,0,0,66,79,79,76,1,7,0,0,0,0,0,0,0,86,69,67,95,73,78,84,1,8,0,0,0,0,0,0,0,86,69,67,95,66,79,79,76,0,39,0,0,0,38,0,0,0,69,0,0,0,68,0,0,0,69,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,5,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,6,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,6,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,6,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,1,0,0,0,4,0,0,0,0,0,0,0,6,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,1,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,1,0,0,0,8,0,0,0,0,0,0,0,6,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,6,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,1,0,0,0,10,0,0,0,0,0,0,0,6,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,6,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,1,0,0,0,12,0,0,0,0,0,0,0,6,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,6,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,14,0,0,0,0,0,0,0,6,0,0,0,1,0,0,0,15,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,9,0,0,0,0,0,0,0,1,0,0,0,16,0,0,0,0,0,0,0,6,0,0,0,1,0,0,0,17,0,0,0,0,0,0,0,6,0,0,0,1,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,1,0,0,0,17,0,0,0,0,0,0,0,6,0,0,0,1,0,0,0,18,0,0,0,6,0,0,0,0,0,0,0,1,0,0,0,20,0,0,0,0,0,0,0,20,0,0,0,1,0,0,0,21,0,0,0,0,0,0,0,22,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,20,0,0,0,0,0,0,0,20,0,0,0,1,0,0,0,22,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,0,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,20,0,0,0,1,0,0,0,21,0,0,0,0,0,0,0,22,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,20,0,0,0,1,0,0,0,22,0,0,0,0,0,0,0,6,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,1,0,0,0,21,0,0,0,0,0,0,0,22,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,1,0,0,0,24,0,0,0,0,0,0,0,9,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,14,0,0,0,0,0,0,0,10,0,0,0,1,0,0,0,15,0,0,0,7,0,0,0,0,0,0,0,1,0,0,0,25,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,22,0,0,0,1,0,0,0,17,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,18,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,14,0,0,0,0,0,0,0,15,0,0,0,1,0,0,0,15,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,1,0,0,0,24,0,0,0,0,0,0,0,6,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,10,0,0,0,0,0,0,0,1,0,0,0,26,0,0,0,0,0,0,0,20,0,0,0,1,0,0,0,14,0,0,0,0,0,0,0,17,0,0,0,1,0,0,0,24,0,0,0,0,0,0,0,17,0,0,0,1,0,0,0,24,0,0,0,0,0,0,0,17,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,22,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,11,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,12,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,13,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,27,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,28,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,29,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,30,0,0,0,5,0,0,0,0,0,0,0,1,0,0,0,31,0,0,0,0,0,0,0,20,0,0,0,1,0,0,0,32,0,0,0,0,0,0,0,21,0,0,0,1,0,0,0,17,0,0,0,5,0,0,0,0,0,0,0,1,0,0,0,31,0,0,0,0,0,0,0,20,0,0,0,1,0,0,0,32,0,0,0,1,0,0,0,27,0,0,0,1,0,0,0,17,0,0,0,5,0,0,0,0,0,0,0,1,0,0,0,31,0,0,0,0,0,0,0,20,0,0,0,1,0,0,0,33,0,0,0,0,0,0,0,21,0,0,0,1,0,0,0,17,0,0,0,5,0,0,0,0,0,0,0,1,0,0,0,31,0,0,0,0,0,0,0,20,0,0,0,1,0,0,0,33,0,0,0,1,0,0,0,27,0,0,0,1,0,0,0,17,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,31,0,0,0,0,0,0,0,20,0,0,0,1,0,0,0,17,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,34,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,35,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,36,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,37,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,68,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,0,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,19,0,0,0,0,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,1,0,0,0,0,0,0,0,28,0,0,0,4,0,0,0,0,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,1,0,0,0,0,0,0,0,33,0,0,0,2,0,0,0,0,0,0,0,34,0,0,0,35,0,0,0,2,0,0,0,0,0,0,0,36,0,0,0,37,0,0,0,1,0,0,0,0,0,0,0,38,0,0,0,1,0,0,0,0,0,0,0,39,0,0,0,2,0,0,0,0,0,0,0,40,0,0,0,41,0,0,0,2,0,0,0,0,0,0,0,42,0,0,0,43,0,0,0,1,0,0,0,0,0,0,0,44,0,0,0,10,0,0,0,0,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,1,0,0,0,0,0,0,0,55,0,0,0,2,0,0,0,0,0,0,0,56,0,0,0,57,0,0,0,1,0,0,0,0,0,0,0,58,0,0,0,5,0,0,0,0,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,4,0,0,0,0,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,69,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,14,0,0,0,15,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,17,0,0,0,17,0,0,0,17,0,0,0,17,0,0,0,17,0,0,0,17,0,0,0,17,0,0,0,17,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,21,0,0,0,21,0,0,0,21,0,0,0,21,0,0,0,22,0,0,0,22,0,0,0,22,0,0,0,22,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,1,4,0,0,0,0,0,0,0,0,0,0,0,1,5,0,0,0,0,0,0,0,0,0,0,0,1,6,0,0,0,0,0,0,0,0,0,0,0,1,7,0,0,0,0,0,0,0,0,0,0,0,1,8,0,0,0,0,0,0,0,0,0,0,0,1,9,0,0,0,0,0,0,0,0,0,0,0,1,10,0,0,0,0,0,0,0,0,0,0,0,1,11,0,0,0,0,0,0,0,0,0,0,0,1,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,0,0,0,0,0,0,0,0,0,0,0,0,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,1,10,0,0,0,0,0,0,0,0,0,0,0,1,11,0,0,0,0,0,0,0,0,0,0,0,1,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,1,40,0,0,0,0,0,0,0,66,111,100,121,58,58,110,101,119,40,36,49,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,37,0,0,0,0,0,0,0,123,108,101,116,32,109,117,116,32,118,32,61,32,36,49,63,59,32,118,46,112,117,115,104,40,36,50,63,41,59,32,79,107,40,118,41,125,1,13,0,0,0,0,0,0,0,79,107,40,118,101,99,33,91,36,49,63,93,41,1,38,0,0,0,0,0,0,0,123,108,101,116,32,109,117,116,32,118,32,61,32,36,49,63,59,32,118,46,112,117,115,104,40,36,50,63,41,59,32,79,107,40,118,41,32,125,1,13,0,0,0,0,0,0,0,79,107,40,118,101,99,33,91,36,49,63,93,41,1,45,0,0,0,0,0,0,0,83,116,97,116,101,109,101,110,116,58,58,110,101,119,40,36,49,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,45,0,0,0,0,0,0,0,83,116,97,116,101,109,101,110,116,58,58,110,101,119,40,36,49,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,45,0,0,0,0,0,0,0,83,116,97,116,101,109,101,110,116,58,58,110,101,119,40,36,49,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,45,0,0,0,0,0,0,0,83,116,97,116,101,109,101,110,116,58,58,110,101,119,40,36,49,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,100,0,0,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,58,58,110,101,119,40,79,112,101,114,97,116,105,111,110,58,58,110,101,119,40,36,49,63,44,79,112,58,58,65,68,68,44,36,51,63,44,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,100,0,0,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,58,58,110,101,119,40,79,112,101,114,97,116,105,111,110,58,58,110,101,119,40,36,49,63,44,79,112,58,58,83,85,66,44,36,51,63,44,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,100,0,0,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,58,58,110,101,119,40,79,112,101,114,97,116,105,111,110,58,58,110,101,119,40,36,49,63,44,79,112,58,58,77,85,76,44,36,51,63,44,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,100,0,0,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,58,58,110,101,119,40,79,112,101,114,97,116,105,111,110,58,58,110,101,119,40,36,49,63,44,79,112,58,58,68,73,86,44,36,51,63,44,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,100,0,0,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,58,58,110,101,119,40,79,112,101,114,97,116,105,111,110,58,58,110,101,119,40,36,49,63,44,79,112,58,58,69,81,32,44,36,51,63,44,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,100,0,0,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,58,58,110,101,119,40,79,112,101,114,97,116,105,111,110,58,58,110,101,119,40,36,49,63,44,79,112,58,58,78,69,32,44,36,51,63,44,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,100,0,0,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,58,58,110,101,119,40,79,112,101,114,97,116,105,111,110,58,58,110,101,119,40,36,49,63,44,79,112,58,58,71,84,32,44,36,51,63,44,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,100,0,0,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,58,58,110,101,119,40,79,112,101,114,97,116,105,111,110,58,58,110,101,119,40,36,49,63,44,79,112,58,58,76,84,32,44,36,51,63,44,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,100,0,0,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,58,58,110,101,119,40,79,112,101,114,97,116,105,111,110,58,58,110,101,119,40,36,49,63,44,79,112,58,58,71,69,32,44,36,51,63,44,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,100,0,0,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,58,58,110,101,119,40,79,112,101,114,97,116,105,111,110,58,58,110,101,119,40,36,49,63,44,79,112,58,58,76,69,32,44,36,51,63,44,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,100,0,0,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,58,58,110,101,119,40,79,112,101,114,97,116,105,111,110,58,58,110,101,119,40,36,49,63,44,79,112,58,58,65,78,68,44,36,51,63,44,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,100,0,0,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,58,58,110,101,119,40,79,112,101,114,97,116,105,111,110,58,58,110,101,119,40,36,49,63,44,79,112,58,58,79,82,32,44,36,51,63,44,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,100,0,0,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,58,58,110,101,119,40,79,112,101,114,97,116,105,111,110,58,58,110,101,119,40,36,49,63,44,79,112,58,58,88,79,82,44,36,51,63,44,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,46,0,0,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,58,58,110,101,119,40,36,50,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,46,0,0,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,58,58,110,101,119,40,36,49,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,46,0,0,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,58,58,110,101,119,40,36,49,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,46,0,0,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,58,58,110,101,119,40,36,49,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,46,0,0,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,58,58,110,101,119,40,36,49,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,46,0,0,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,58,58,110,101,119,40,36,49,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,58,0,0,0,0,0,0,0,67,111,110,100,105,116,105,111,110,97,108,58,58,110,101,119,40,36,50,63,44,32,36,52,63,44,32,36,56,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,32,36,115,112,97,110,41,41,1,58,0,0,0,0,0,0,0,65,115,115,105,103,110,58,58,110,101,119,40,36,50,63,44,32,116,114,117,101,44,32,36,52,63,44,32,36,54,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,59,0,0,0,0,0,0,0,65,115,115,105,103,110,58,58,110,101,119,40,36,50,63,44,32,116,114,117,101,44,32,78,111,110,101,44,32,36,52,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,59,0,0,0,0,0,0,0,65,115,115,105,103,110,58,58,110,101,119,40,36,50,63,44,32,102,97,108,115,101,44,32,36,52,63,44,32,36,54,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,60,0,0,0,0,0,0,0,65,115,115,105,103,110,58,58,110,101,119,40,36,50,63,44,32,102,97,108,115,101,44,32,78,111,110,101,44,32,36,52,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,50,0,0,0,0,0,0,0,70,117,110,99,116,105,111,110,65,114,103,58,58,110,101,119,40,36,49,63,44,36,51,63,44,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,35,0,0,0,0,0,0,0,108,101,116,32,109,117,116,32,118,32,61,32,36,49,63,59,32,118,46,112,117,115,104,40,36,51,63,41,59,32,79,107,40,118,41,1,13,0,0,0,0,0,0,0,79,107,40,118,101,99,33,91,36,49,63,93,41,1,14,0,0,0,0,0,0,0,79,107,40,86,101,99,58,58,110,101,119,40,41,41,1,7,0,0,0,0,0,0,0,79,107,40,36,50,63,41,1,58,0,0,0,0,0,0,0,70,117,110,99,116,105,111,110,68,101,99,58,58,110,101,119,40,36,50,63,44,36,51,63,44,36,54,63,44,36,52,63,44,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,47,0,0,0,0,0,0,0,73,110,118,111,107,101,58,58,110,101,119,40,36,49,63,44,32,36,50,63,44,32,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,14,0,0,0,0,0,0,0,79,107,40,86,101,99,58,58,110,101,119,40,41,41,1,7,0,0,0,0,0,0,0,79,107,40,36,50,63,41,1,35,0,0,0,0,0,0,0,108,101,116,32,109,117,116,32,118,32,61,32,36,49,63,59,32,118,46,112,117,115,104,40,36,51,63,41,59,32,79,107,40,118,41,1,15,0,0,0,0,0,0,0,79,107,40,32,118,101,99,33,91,36,49,63,93,32,41,1,73,0,0,0,0,0,0,0,67,111,109,112,111,115,105,116,105,111,110,97,108,70,117,110,99,116,105,111,110,58,58,110,101,119,40,36,50,63,44,36,52,63,44,36,54,63,44,36,56,63,44,36,49,48,63,44,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,59,0,0,0,0,0,0,0,67,111,109,112,111,115,105,116,105,111,110,97,108,70,117,110,99,116,105,111,110,65,114,103,58,58,110,101,119,40,36,49,63,44,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,59,0,0,0,0,0,0,0,67,111,109,112,111,115,105,116,105,111,110,97,108,70,117,110,99,116,105,111,110,65,114,103,58,58,110,101,119,40,36,49,63,44,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,59,0,0,0,0,0,0,0,67,111,109,112,111,115,105,116,105,111,110,97,108,70,117,110,99,116,105,111,110,65,114,103,58,58,110,101,119,40,36,49,63,44,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,59,0,0,0,0,0,0,0,67,111,109,112,111,115,105,116,105,111,110,97,108,70,117,110,99,116,105,111,110,65,114,103,58,58,110,101,119,40,36,49,63,44,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,63,0,0,0,0,0,0,0,67,111,109,112,111,115,105,116,105,111,110,97,108,70,117,110,99,116,105,111,110,65,114,103,58,58,110,101,119,40,79,112,58,58,65,68,68,44,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,63,0,0,0,0,0,0,0,67,111,109,112,111,115,105,116,105,111,110,97,108,70,117,110,99,116,105,111,110,65,114,103,58,58,110,101,119,40,79,112,58,58,83,85,66,44,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,63,0,0,0,0,0,0,0,67,111,109,112,111,115,105,116,105,111,110,97,108,70,117,110,99,116,105,111,110,65,114,103,58,58,110,101,119,40,79,112,58,58,77,85,76,44,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,63,0,0,0,0,0,0,0,67,111,109,112,111,115,105,116,105,111,110,97,108,70,117,110,99,116,105,111,110,65,114,103,58,58,110,101,119,40,79,112,58,58,65,78,68,44,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,62,0,0,0,0,0,0,0,67,111,109,112,111,115,105,116,105,111,110,97,108,70,117,110,99,116,105,111,110,65,114,103,58,58,110,101,119,40,79,112,58,58,79,82,44,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,63,0,0,0,0,0,0,0,67,111,109,112,111,115,105,116,105,111,110,97,108,70,117,110,99,116,105,111,110,65,114,103,58,58,110,101,119,40,79,112,58,58,88,79,82,44,83,112,97,110,58,58,105,110,116,111,40,36,108,101,120,101,114,44,36,115,112,97,110,41,41,1,35,0,0,0,0,0,0,0,79,107,40,83,112,97,110,58,58,110,101,119,40,36,108,101,120,101,114,44,32,78,111,110,101,44,32,36,115,112,97,110,41,63,41,1,33,0,0,0,0,0,0,0,79,107,40,83,112,97,110,58,58,110,101,119,40,36,108,101,120,101,114,44,78,111,110,101,44,36,115,112,97,110,41,63,41,1,33,0,0,0,0,0,0,0,79,107,40,83,112,97,110,58,58,110,101,119,40,36,108,101,120,101,114,44,78,111,110,101,44,36,115,112,97,110,41,63,41,1,51,0,0,0,0,0,0,0,79,107,40,32,73,100,101,110,116,58,58,110,101,119,40,32,83,112,97,110,58,58,110,101,119,40,36,108,101,120,101,114,44,32,78,111,110,101,44,32,36,115,112,97,110,41,63,32,41,32,41,1,86,0,0,0,0,0,0,0,79,107,40,84,101,109,112,108,97,116,101,58,58,110,101,119,40,36,50,63,44,32,83,112,97,110,58,58,110,101,119,40,36,108,101,120,101,114,44,32,78,111,110,101,44,32,36,115,112,97,110,41,63,44,32,84,101,109,112,108,97,116,101,66,101,104,97,118,105,111,114,58,58,97,115,115,105,103,110,40,36,52,63,41,41,41,1,111,0,0,0,0,0,0,0,79,107,40,84,101,109,112,108,97,116,101,58,58,110,101,119,40,36,50,63,44,32,83,112,97,110,58,58,110,101,119,40,36,108,101,120,101,114,44,32,78,111,110,101,44,32,36,115,112,97,110,41,63,44,32,84,101,109,112,108,97,116,101,66,101,104,97,118,105,111,114,58,58,97,115,115,105,103,110,40,83,112,97,110,58,58,110,101,119,40,36,108,101,120,101,114,44,32,36,52,44,32,78,111,110,101,41,63,41,41,41,1,88,0,0,0,0,0,0,0,79,107,40,84,101,109,112,108,97,116,101,58,58,110,101,119,40,36,50,63,44,32,83,112,97,110,58,58,110,101,119,40,36,108,101,120,101,114,44,32,78,111,110,101,44,32,36,115,112,97,110,41,63,44,32,84,101,109,112,108,97,116,101,66,101,104,97,118,105,111,114,58,58,102,97,108,108,98,97,99,107,40,36,52,63,41,41,41,1,113,0,0,0,0,0,0,0,79,107,40,84,101,109,112,108,97,116,101,58,58,110,101,119,40,36,50,63,44,32,83,112,97,110,58,58,110,101,119,40,36,108,101,120,101,114,44,32,78,111,110,101,44,32,36,115,112,97,110,41,63,44,32,84,101,109,112,108,97,116,101,66,101,104,97,118,105,111,114,58,58,102,97,108,108,98,97,99,107,40,83,112,97,110,58,58,110,101,119,40,36,108,101,120,101,114,44,32,36,52,44,32,78,111,110,101,41,63,41,41,41,1,61,0,0,0,0,0,0,0,79,107,40,84,101,109,112,108,97,116,101,58,58,110,101,119,40,36,50,63,44,32,83,112,97,110,58,58,110,101,119,40,36,108,101,120,101,114,44,32,78,111,110,101,44,32,36,115,112,97,110,41,63,44,32,78,111,110,101,41,41,1,13,0,0,0,0,0,0,0,79,107,40,75,105,110,100,58,58,73,110,116,41,1,14,0,0,0,0,0,0,0,79,107,40,75,105,110,100,58,58,66,111,111,108,41,1,19,0,0,0,0,0,0,0,79,107,40,75,105,110,100,58,58,67,111,108,108,79,102,73,110,116,41,1,20,0,0,0,0,0,0,0,79,107,40,75,105,110,100,58,58,67,111,108,108,79,102,66,111,111,108,41,0,1,10,3,0,0,0,0,0,0,117,115,101,32,99,114,97,116,101,58,58,105,110,116,101,114,110,97,108,115,58,58,112,97,114,115,101,114,58,58,115,112,97,110,58,58,123,83,112,97,110,125,59,13,10,117,115,101,32,99,114,97,116,101,58,58,105,110,116,101,114,110,97,108,115,58,58,112,97,114,115,101,114,58,58,97,115,116,58,58,107,105,110,100,58,58,123,75,105,110,100,125,59,13,10,117,115,101,32,99,114,97,116,101,58,58,105,110,116,101,114,110,97,108,115,58,58,112,97,114,115,101,114,58,58,97,115,116,58,58,97,114,103,115,58,58,123,70,117,110,99,116,105,111,110,65,114,103,125,59,13,10,117,115,101,32,99,114,97,116,101,58,58,105,110,116,101,114,110,97,108,115,58,58,112,97,114,115,101,114,58,58,97,115,116,58,58,102,117,110,99,58,58,123,70,117,110,99,116,105,111,110,68,101,99,125,59,13,10,117,115,101,32,99,114,97,116,101,58,58,105,110,116,101,114,110,97,108,115,58,58,112,97,114,115,101,114,58,58,97,115,116,58,58,99,111,109,112,97,114,103,58,58,123,67,111,109,112,111,115,105,116,105,111,110,97,108,70,117,110,99,116,105,111,110,65,114,103,44,67,111,109,112,111,115,105,116,105,111,110,97,108,70,117,110,99,116,105,111,110,125,59,13,10,117,115,101,32,99,114,97,116,101,58,58,105,110,116,101,114,110,97,108,115,58,58,112,97,114,115,101,114,58,58,97,115,116,58,58,105,100,101,110,116,58,58,123,73,100,101,110,116,125,59,13,10,117,115,101,32,99,114,97,116,101,58,58,105,110,116,101,114,110,97,108,115,58,58,112,97,114,115,101,114,58,58,97,115,116,58,58,105,110,118,111,107,101,58,58,123,73,110,118,111,107,101,125,59,13,10,117,115,101,32,99,114,97,116,101,58,58,105,110,116,101,114,110,97,108,115,58,58,112,97,114,115,101,114,58,58,97,115,116,58,58,101,120,112,114,58,58,123,69,120,112,114,101,115,115,105,111,110,125,59,13,10,117,115,101,32,99,114,97,116,101,58,58,105,110,116,101,114,110,97,108,115,58,58,112,97,114,115,101,114,58,58,97,115,116,58,58,116,101,109,112,108,97,116,101,58,58,123,84,101,109,112,108,97,116,101,44,84,101,109,112,108,97,116,101,66,101,104,97,118,105,111,114,125,59,13,10,117,115,101,32,99,114,97,116,101,58,58,105,110,116,101,114,110,97,108,115,58,58,112,97,114,115,101,114,58,58,97,115,116,58,58,97,115,115,105,103,110,58,58,123,65,115,115,105,103,110,125,59,13,10,117,115,101,32,99,114,97,116,101,58,58,105,110,116,101,114,110,97,108,115,58,58,112,97,114,115,101,114,58,58,97,115,116,58,58,111,112,58,58,123,79,112,44,79,112,101,114,97,116,105,111,110,125,59,13,10,117,115,101,32,99,114,97,116,101,58,58,105,110,116,101,114,110,97,108,115,58,58,112,97,114,115,101,114,58,58,97,115,116,58,58,115,116,97,116,101,109,101,110,116,58,58,123,83,116,97,116,101,109,101,110,116,44,66,111,100,121,125,59,13,10,117,115,101,32,99,114,97,116,101,58,58,105,110,116,101,114,110,97,108,115,58,58,112,97,114,115,101,114,58,58,97,115,116,58,58,99,111,110,100,105,116,105,111,110,58,58,123,67,111,110,100,105,116,105,111,110,97,108,125,59,13,10,23,0,0,0,0,0,0,0,0,1,31,0,0,0,0,0,0,0,82,101,115,117,108,116,60,66,111,100,121,44,108,114,112,97,114,58,58,76,101,120,101,109,101,60,117,51,50,62,62,1,41,0,0,0,0,0,0,0,82,101,115,117,108,116,60,86,101,99,60,83,116,97,116,101,109,101,110,116,62,44,108,114,112,97,114,58,58,76,101,120,101,109,101,60,117,51,50,62,62,1,41,0,0,0,0,0,0,0,82,101,115,117,108,116,60,86,101,99,60,83,116,97,116,101,109,101,110,116,62,44,108,114,112,97,114,58,58,76,101,120,101,109,101,60,117,51,50,62,62,1,36,0,0,0,0,0,0,0,82,101,115,117,108,116,60,83,116,97,116,101,109,101,110,116,44,108,114,112,97,114,58,58,76,101,120,101,109,101,60,117,51,50,62,62,1,36,0,0,0,0,0,0,0,82,101,115,117,108,116,60,83,116,97,116,101,109,101,110,116,44,108,114,112,97,114,58,58,76,101,120,101,109,101,60,117,51,50,62,62,1,37,0,0,0,0,0,0,0,82,101,115,117,108,116,60,69,120,112,114,101,115,115,105,111,110,44,108,114,112,97,114,58,58,76,101,120,101,109,101,60,117,51,50,62,62,1,38,0,0,0,0,0,0,0,82,101,115,117,108,116,60,67,111,110,100,105,116,105,111,110,97,108,44,108,114,112,97,114,58,58,76,101,120,101,109,101,60,117,51,50,62,62,1,33,0,0,0,0,0,0,0,82,101,115,117,108,116,60,65,115,115,105,103,110,44,108,114,112,97,114,58,58,76,101,120,101,109,101,60,117,51,50,62,62,1,38,0,0,0,0,0,0,0,82,101,115,117,108,116,60,70,117,110,99,116,105,111,110,65,114,103,44,108,114,112,97,114,58,58,76,101,120,101,109,101,60,117,51,50,62,62,1,43,0,0,0,0,0,0,0,82,101,115,117,108,116,60,86,101,99,60,70,117,110,99,116,105,111,110,65,114,103,62,44,108,114,112,97,114,58,58,76,101,120,101,109,101,60,117,51,50,62,62,1,43,0,0,0,0,0,0,0,82,101,115,117,108,116,60,86,101,99,60,70,117,110,99,116,105,111,110,65,114,103,62,44,108,114,112,97,114,58,58,76,101,120,101,109,101,60,117,51,50,62,62,1,38,0,0,0,0,0,0,0,82,101,115,117,108,116,60,70,117,110,99,116,105,111,110,68,101,99,44,108,114,112,97,114,58,58,76,101,120,101,109,101,60,117,51,50,62,62,1,33,0,0,0,0,0,0,0,82,101,115,117,108,116,60,73,110,118,111,107,101,44,108,114,112,97,114,58,58,76,101,120,101,109,101,60,117,51,50,62,62,1,42,0,0,0,0,0,0,0,82,101,115,117,108,116,60,86,101,99,60,69,120,112,114,101,115,115,105,111,110,62,44,108,114,112,97,114,58,58,76,101,120,101,109,101,60,117,51,50,62,62,1,42,0,0,0,0,0,0,0,82,101,115,117,108,116,60,86,101,99,60,69,120,112,114,101,115,115,105,111,110,62,44,108,114,112,97,114,58,58,76,101,120,101,109,101,60,117,51,50,62,62,1,48,0,0,0,0,0,0,0,82,101,115,117,108,116,60,67,111,109,112,111,115,105,116,105,111,110,97,108,70,117,110,99,116,105,111,110,44,108,114,112,97,114,58,58,76,101,120,101,109,101,60,117,51,50,62,62,1,51,0,0,0,0,0,0,0,82,101,115,117,108,116,60,67,111,109,112,111,115,105,116,105,111,110,97,108,70,117,110,99,116,105,111,110,65,114,103,44,108,114,112,97,114,58,58,76,101,120,101,109,101,60,117,51,50,62,62,1,31,0,0,0,0,0,0,0,82,101,115,117,108,116,60,83,112,97,110,44,108,114,112,97,114,58,58,76,101,120,101,109,101,60,117,51,50,62,62,1,31,0,0,0,0,0,0,0,82,101,115,117,108,116,60,83,112,97,110,44,108,114,112,97,114,58,58,76,101,120,101,109,101,60,117,51,50,62,62,1,32,0,0,0,0,0,0,0,82,101,115,117,108,116,60,73,100,101,110,116,44,108,114,112,97,114,58,58,76,101,120,101,109,101,60,117,51,50,62,62,1,35,0,0,0,0,0,0,0,82,101,115,117,108,116,60,84,101,109,112,108,97,116,101,44,108,114,112,97,114,58,58,76,101,120,101,109,101,60,117,51,50,62,62,1,31,0,0,0,0,0,0,0,82,101,115,117,108,116,60,75,105,110,100,44,108,114,112,97,114,58,58,76,101,120,101,109,101,60,117,51,50,62,62,0,];
#[allow(dead_code)] const __STABLE_DATA: &[u8] = &[139,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,39,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,32,1,0,0,0,0,0,0,131,4,0,0,0,0,0,0,78,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,0,0,0,0,0,0,0,195,0,0,0,0,0,0,0,234,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,0,0,0,0,0,0,0,17,1,0,0,0,0,0,0,44,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,179,4,0,0,0,0,0,0,82,0,0,0,0,0,0,0,131,4,0,0,0,0,0,0,4,0,0,0,0,0,0,0,195,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,34,1,0,0,0,0,0,0,234,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,131,4,0,0,0,0,0,0,56,1,0,0,0,0,0,0,5,0,0,0,0,0,0,0,95,1,0,0,0,0,0,0,134,1,0,0,0,0,0,0,173,1,0,0,0,0,0,0,212,1,0,0,0,0,0,0,251,1,0,0,0,0,0,0,34,2,0,0,0,0,0,0,73,2,0,0,0,0,0,0,112,2,0,0,0,0,0,0,151,2,0,0,0,0,0,0,190,2,0,0,0,0,0,0,229,2,0,0,0,0,0,0,12,3,0,0,0,0,0,0,51,3,0,0,0,0,0,0,90,3,0,0,0,0,0,0,129,3,0,0,0,0,0,0,34,0,0,0,0,0,0,0,35,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,250,4,0,0,0,0,0,0,168,3,0,0,0,0,0,0,44,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,83,0,0,0,0,0,0,0,90,0,0,0,0,0,0,0,121,0,0,0,0,0,0,0,155,4,0,0,0,0,0,0,195,4,0,0,0,0,0,0,134,0,0,0,0,0,0,0,3,5,0,0,0,0,0,0,11,5,0,0,0,0,0,0,14,5,0,0,0,0,0,0,32,5,0,0,0,0,0,0,76,0,0,0,0,0,0,0,82,0,0,0,0,0,0,0,125,0,0,0,0,0,0,0,121,0,0,0,0,0,0,0,136,0,0,0,0,0,0,0,149,0,0,0,0,0,0,0,209,4,0,0,0,0,0,0,160,0,0,0,0,0,0,0,199,0,0,0,0,0,0,0,238,0,0,0,0,0,0,0,21,1,0,0,0,0,0,0,60,1,0,0,0,0,0,0,61,1,0,0,0,0,0,0,62,1,0,0,0,0,0,0,63,1,0,0,0,0,0,0,64,1,0,0,0,0,0,0,66,1,0,0,0,0,0,0,153,0,0,0,0,0,0,0,67,1,0,0,0,0,0,0,68,1,0,0,0,0,0,0,155,4,0,0,0,0,0,0,207,3,0,0,0,0,0,0,246,3,0,0,0,0,0,0,29,4,0,0,0,0,0,0,68,4,0,0,0,0,0,0,159,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,250,4,0,0,0,0,0,0,168,0,0,0,0,0,0,0,223,4,0,0,0,0,0,0,94,1,0,0,0,0,0,0,96,1,0,0,0,0,0,0,170,0,0,0,0,0,0,0,237,4,0,0,0,0,0,0,165,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,17,1,0,0,0,0,0,0,250,4,0,0,0,0,0,0,237,4,0,0,0,0,0,0,175,0,0,0,0,0,0,0,107,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,0,0,0,0,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,21,0,0,0,0,0,0,85,0,0,0,0,0,0,0,255,191,110,49,255,255,255,255,255,223,255,175,91,204,223,255,255,255,255,15,0,144,239,255,251,255,255,255,255,253,255,239,255,255,2,128,247,255,127,0,64,249,254,191,255,95,255,155,255,255,255,255,239,255,255,215,255,230,255,255,255,255,251,7,0,202,247,255,249,255,255,255,255,255,127,221,98,254,255,255,255,191,255,255,95,183,152,255,255,255,255,239,255,255,255,255,247,15,0,148,239,255,3,0,202,247,255,1,0,229,251,255,0,0,50,253,121,255,191,110,49,127,0,160,124,255,223,255,143,255,205,255,255,215,255,230,255,255,235,127,243,255,255,245,191,249,255,255,250,223,252,255,127,253,111,254,255,191,254,55,255,255,95,255,155,255,255,175,255,205,255,255,215,255,230,255,255,235,127,243,255,255,245,191,249,255,255,250,223,252,255,127,253,111,254,1,64,255,255,255,255,255,254,127,126,0,112,255,255,255,255,255,243,255,255,255,235,22,243,255,255,253,255,255,255,255,239,255,255,254,127,221,98,254,255,255,159,255,255,255,223,255,255,127,0,208,191,255,31,0,40,223,255,247,255,247,239,255,7,0,202,247,255,1,0,229,251,255,0,128,242,253,127,0,64,249,254,63,0,160,124,255,31,0,80,190,255,15,0,40,223,255,7,0,148,239,255,3,0,202,247,255,1,0,229,251,255,0,128,242,253,127,0,64,249,254,63,0,160,124,255,31,0,80,190,255,15,0,40,223,255,247,255,255,127,247,255,255,255,191,251,255,255,250,223,252,255,127,253,111,254,255,255,255,255,195,255,191,255,223,255,255,255,255,255,240,255,255,255,127,248,255,235,127,243,143,63,254,63,248,3,0,229,251,255,254,127,253,111,254,255,255,253,255,255,255,255,254,255,255,255,127,255,255,255,255,191,255,255,31,0,188,255,255,7,0,254,255,255,127,255,255,255,255,189,255,250,253,255,222,127,253,254,127,239,191,126,255,191,247,95,191,255,255,255,255,255,127,248,255,247,239,255,255,255,255,254,255,255,255,253,251,255,255,255,251,255,255,223,255,255,255,127,0,224,255,255,255,255,223,191,255,255,255,239,223,255,255,255,247,239,255,255,255,251,247,255,255,255,253,251,255,255,255,254,253,255,255,127,255,254,255,255,191,127,255,255,255,223,191,255,255,255,239,223,255,255,255,255,239,255,255,255,251,247,255,255,255,253,251,255,3,128,254,253,255,0,64,249,254,63,0,160,124,255,31,0,80,190,255,15,0,40,223,255,247,255,127,255,255,255,255,245,191,249,255,255,255,255,15,255,255,255,127,255,255,255,255,255,195,255,95,183,152,255,255,175,255,205,63,254,248,255,224,255,255,223,255,255,7,0,254,255,255,255,255,253,251,255,255,255,254,253,255,255,255,251,255,127,0,224,255,255,255,255,255,191,255,255,255,215,255,230,255,255,235,22,243,143,63,254,63,248,7,0,239,255,255,255,255,254,255,255,0,64,249,254,191,255,255,255,255,161,255,255,255,255,31,0,0,71,5,0,0,0,0,0,0,212,0,0,0,0,0,0,0,163,142,58,234,168,163,142,58,58,234,168,163,142,58,234,168,168,163,78,91,234,168,163,142,146,58,177,168,163,78,78,97,93,116,209,83,76,45,117,20,83,86,90,93,133,165,142,58,26,106,168,161,134,26,106,168,168,161,134,26,106,168,161,134,134,26,3,168,145,134,26,106,106,36,21,84,11,205,148,160,17,132,0,73,164,144,66,12,112,41,116,81,83,73,33,52,120,227,141,55,222,120,163,70,141,55,222,120,227,141,55,222,222,72,224,141,4,222,120,227,35,65,113,13,73,144,157,55,4,201,117,39,129,4,18,120,85,36,137,36,146,72,34,129,134,24,98,136,33,134,55,17,98,136,33,134,24,98,136,33,225,129,24,30,136,33,134,24,7,213,53,231,129,35,98,136,132,231,136,7,30,120,32,134,158,37,150,88,98,137,7,30,94,120,225,133,23,98,164,87,225,133,23,94,120,225,133,23,6,94,104,224,133,23,94,120,196,215,158,6,182,120,225,133,160,45,26,104,160,129,23,26,178,148,88,97,132,26,104,208,97,134,25,102,120,1,0,0,25,102,152,97,134,25,102,152,152,97,129,25,102,152,97,134,0,0,22,248,98,134,25,22,190,88,96,129,5,102,88,0,0,0,0,0,88,96,1,0,27,110,184,97,6,0,0,0,184,225,134,27,110,184,225,134,134,3,110,184,225,134,27,110,0,56,160,139,27,110,56,224,226,128,3,14,184,225,0,0,0,0,0,224,128,3,0,232,120,226,137,27,0,0,0,0,137,39,158,120,226,137,39,158,154,120,226,137,39,158,120,226,160,137,53,158,120,162,137,39,38,154,104,226,137,38,0,0,40,0,128,38,154,0,96,141,138,40,158,0,0,128,1,0,162,136,34,138,40,162,136,34,32,138,40,162,136,34,138,40,54,210,136,34,138,1,162,40,152,163,140,40,206,8,99,140,128,51,194,24,163,141,52,226,82,136,2,128,56,230,40,3,33,133,20,82,72,33,133,20,28,82,72,33,133,20,82,72,0,32,133,20,134,72,161,72,128,33,82,40,2,0,0,0,0,0,0,0,0,0,0,0,33,5,0,0,0,0,0,0,21,86,88,97,133,21,86,88,88,97,133,21,86,88,97,133,128,21,86,0,96,5,0,86,0,88,1,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,8,33,132,16,66,8,33,132,70,32,125,228,33,132,16,66,66,8,1,128,16,0,196,209,32,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,17,70,24,97,132,17,66,129,244,97,132,17,70,24,97,97,4,0,70,0,16,71,27,17,0,0,0,0,0,0,24,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,74,40,161,132,18,74,24,1,162,132,18,74,40,161,132,18,18,0,40,1,64,28,109,4,0,0,0,0,0,0,160,132,0,0,0,0,0,0,0,74,0,0,0,0,0,0,0,0,225,132,19,78,56,161,4,0,19,78,56,225,132,19,78,56,0,224,4,0,113,180,225,132,0,0,0,0,0,128,19,78,0,0,0,0,0,0,56,1,0,0,0,0,0,0,0,0,12,50,200,32,131,19,0,0,228,81,71,36,141,36,34,131,128,12,0,196,209,70,32,125,0,0,0,0,0,50,200,0,0,0,0,0,0,32,3,0,0,0,0,0,0,0,0,0,216,96,131,13,50,0,0,0,71,29,145,52,98,131,13,54,54,0,16,71,27,129,244,145,0,0,0,0,216,96,3,0,0,0,0,0,128,13,0,0,0,0,0,0,0,0,0,0,131,14,58,216,0,0,0,0,117,68,162,131,14,58,232,160,0,64,28,109,4,210,71,30,0,0,0,160,131,14,0,232,0,0,0,0,58,0,0,0,0,0,0,0,0,0,0,0,62,248,160,3,0,0,0,0,225,131,15,62,248,224,131,15,0,113,180,17,72,31,121,212,0,0,128,15,62,0,224,3,0,0,0,248,0,0,0,0,0,0,0,0,0,0,0,0,96,130,15,0,0,0,0,0,36,141,36,82,72,39,153,152,196,209,70,32,125,228,81,71,0,0,38,152,0,128,9,0,0,0,96,2,0,0,0,0,0,0,0,0,0,0,0,0,10,38,0,0,0,0,0,0,52,146,72,33,157,168,160,130,71,27,129,244,145,71,29,145,0,168,160,2,0,42,0,16,0,128,10,0,0,0,0,0,0,0,0,0,0,0,0,0,168,0,0,0,0,0,0,0,72,34,133,184,224,130,11,46,109,4,210,71,30,117,68,210,224,130,11,0,184,0,64,28,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,90,104,161,133,22,90,104,225,161,133,22,90,104,161,133,22,22,90,0,160,5,0,90,104,104,1,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,143,63,254,248,227,143,22,63,254,248,227,143,63,254,248,248,3,128,63,0,248,227,143,15,0,0,0,0,0,0,254,0,0,0,0,0,0,0,224,0,0,0,0,0,0,0,0,41,166,152,98,138,41,254,0,152,98,138,41,166,152,98,138,10,0,166,0,96,138,41,166,0,0,0,0,0,0,152,98,0,0,0,0,0,0,128,41,0,0,0,0,0,0,0,0,232,163,143,62,250,152,2,0,143,62,250,232,163,143,62,250,0,232,3,128,62,250,232,163,0,0,0,0,0,160,143,62,0,0,0,0,0,0,250,0,0,0,0,0,0,0,0,0,143,61,246,216,163,15,0,0,246,216,99,143,61,246,216,99,96,15,0,246,216,99,143,61,0,0,0,0,128,61,246,0,0,0,0,0,0,216,3,0,0,0,0,0,0,0,0,0,242,200,35,143,61,0,0,0,35,143,60,242,200,35,143,60,60,0,200,35,143,60,242,200,0,0,0,0,242,200,3,128,0,0,0,0,32,15,0,0,0,0,0,0,0,0,0,0,227,142,59,242,0,0,0,0,59,238,184,227,142,59,238,184,0,224,142,59,238,184,227,142,0,0,0,184,227,14,0,238,0,0,0,128,59,0,0,0,0,0,0,0,0,0,0,0,28,114,184,3,0,0,0,0,200,33,135,28,114,200,33,135,128,28,114,200,33,135,28,114,0,0,32,135,28,0,200,1,146,73,37,114,0,0,0,0,30,117,68,210,72,34,133,116,184,34,71,28,109,4,210,71,0,0,0,0,32,66,70,0,133,116,146,73,37,174,0,0,210,71,30,117,68,210,72,34,0,0,168,34,66,28,109,4,0,0,0,0,0,0,16,29,72,34,133,116,146,73,37,170,109,4,210,71,30,117,68,210,146,73,37,122,36,4,64,28,30,117,68,210,72,34,133,116,84,34,72,28,109,4,210,71,71,36,141,36,82,72,39,153,118,196,209,70,32,125,228,81,210,72,34,133,116,146,73,37,28,109,4,210,71,30,117,68,36,82,72,39,153,84,226,71,70,32,125,228,81,71,36,141,33,2,144,90,107,161,197,209,150,25,0,6,1,0,0,0,0,2,1,0,128,65,157,85,25,4,128,64,0,56,4,0,66,23,181,229,22,130,65,14,14,1,224,144,64,6,9,148,164,16,0,2,1,0,128,66,0,0,0,0,0,0,0,56,0,160,16,0,10,1,0,0,128,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,21,0,0,0,0,0,0,85,0,0,0,0,0,0,0,0,64,145,206,0,0,0,0,0,32,0,80,164,51,32,0,0,0,0,240,255,111,16,0,4,0,0,0,0,2,0,16,0,0,253,127,8,0,128,255,191,6,1,64,0,160,0,100,0,0,0,0,16,0,0,40,0,25,0,0,0,0,4,248,255,53,8,0,6,0,0,0,0,0,128,34,157,1,0,0,0,64,0,0,160,72,103,0,0,0,0,16,0,0,0,0,8,240,255,107,16,0,252,255,53,8,0,254,255,26,4,0,255,255,205,2,134,0,64,145,206,128,255,95,131,0,32,0,112,0,50,0,0,40,0,25,0,0,20,128,12,0,0,10,64,6,0,0,5,32,3,0,128,2,144,1,0,64,1,200,0,0,160,0,100,0,0,80,0,50,0,0,40,0,25,0,0,20,128,12,0,0,10,64,6,0,0,5,32,3,0,128,2,144,1,254,191,0,0,0,0,0,1,128,129,255,143,0,0,0,0,0,12,0,0,0,20,233,12,0,0,2,0,0,0,0,16,0,0,1,128,34,157,1,0,0,96,0,0,0,32,0,0,128,255,47,64,0,224,255,215,32,0,8,0,8,16,0,248,255,53,8,0,254,255,26,4,0,255,127,13,2,128,255,191,6,1,192,255,95,131,0,224,255,175,65,0,240,255,215,32,0,248,255,107,16,0,252,255,53,8,0,254,255,26,4,0,255,127,13,2,128,255,191,6,1,192,255,95,131,0,224,255,175,65,0,240,255,215,32,0,8,0,0,128,8,0,0,0,64,4,0,0,5,32,3,0,128,2,144,1,0,0,0,0,60,0,64,0,32,0,0,0,0,0,15,0,0,0,128,7,0,20,128,12,112,192,1,192,7,252,255,26,4,0,1,128,2,144,1,0,0,2,0,0,0,0,1,0,0,0,128,0,0,0,0,64,0,0,224,255,67,0,0,248,255,1,0,0,128,0,0,0,0,66,0,5,2,0,33,128,2,1,128,16,64,129,0,64,8,160,64,0,0,0,0,0,128,7,0,8,16,0,0,0,0,1,0,0,0,2,4,0,0,0,4,0,0,32,0,0,0,128,255,31,0,0,0,0,32,64,0,0,0,16,32,0,0,0,8,16,0,0,0,4,8,0,0,0,2,4,0,0,0,1,2,0,0,128,0,1,0,0,64,128,0,0,0,32,64,0,0,0,16,32,0,0,0,0,16,0,0,0,4,8,0,0,0,2,4,0,252,127,1,2,0,255,191,6,1,192,255,95,131,0,224,255,175,65,0,240,255,215,32,0,8,0,128,0,0,0,0,10,64,6,0,0,0,0,240,0,0,0,128,0,0,0,0,0,60,0,160,72,103,0,0,80,0,50,192,1,7,0,31,0,0,32,0,0,248,255,1,0,0,0,0,2,4,0,0,0,1,2,0,0,0,4,0,128,255,31,0,0,0,0,0,64,0,0,0,40,0,25,0,0,20,233,12,112,192,1,192,7,248,255,16,0,0,0,0,1,0,0,255,191,6,1,64,0,0,0,0,94,0,0,0,0,0,0,0,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,38,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,82,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,118,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,138,0,0,0,0,0,0,0,142,0,0,0,0,0,0,0,158,0,0,0,0,0,0,0,162,0,0,0,0,0,0,0,178,0,0,0,0,0,0,0,182,0,0,0,0,0,0,0,198,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,26,0,0,0,0,0,0,0,202,0,0,0,0,0,0,0,218,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,39,0,0,0,0,0,0,0,222,0,0,0,0,0,0,0,11,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,238,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,12,0,0,0,0,0,0,50,0,0,0,0,0,0,0,1,206,202,255,255,255,255,255,255,255,255,255,255,251,255,255,255,255,255,255,255,255,255,255,255,255,159,239,229,255,255,251,231,123,249,255,255,254,255,255,255,255,255,255,255,255,255,255,239,7,103,229,255,255,251,255,255,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,207,215,242,231,123,249,243,189,252,249,94,254,124,47,127,190,151,63,223,203,159,239,229,207,247,242,231,123,249,243,189,252,249,94,254,124,47,127,190,151,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,191,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,255,255,254,124,47,127,190,151,255,255,191,255,252,247,255,255,239,255,255,247,243,189,252,255,15,254,255,255,127,190,151,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,249,94,254,255,255,255,251,223,255,255,191,1,103,229,207,247,242,255,63,248,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,231,123,249,255,255,255,255,15,254,255,255,255,255,255,255,255,255,255,255,223,255,255,31,44,1,0,0,0,0,0,0,38,0,0,0,0,0,0,0,21,8,7,3,18,6,2,0,0,26,14,16,75,0,0,15,18,129,23,5,127,22,0,4,44,94,42,15,21,8,7,3,82,22,50,4,49,46,14,16,84,15,21,8,47,48,23,5,14,4,96,87,14,16,21,51,23,5,97,22,23,5,53,22,14,128,21,43,93,95,21,41,23,5,94,22,14,0,0,139,0,0,21,54,23,5,0,22,14,0,0,0,14,0,21,55,23,5,0,22,23,5,0,22,14,0,21,57,0,0,21,56,23,5,0,22,14,0,0,0,0,0,21,58,23,5,0,22,14,0,0,0,14,0,21,59,23,5,0,22,23,5,0,22,14,0,21,61,0,0,21,60,23,5,0,22,14,0,0,0,0,0,21,62,23,5,0,22,14,0,0,0,14,0,21,63,23,5,0,22,23,5,0,22,14,0,21,65,0,0,21,64,23,5,0,22,14,0,0,0,0,0,21,66,23,5,0,22,14,0,0,0,14,0,21,85,23,5,0,22,23,5,0,22,14,0,21,98,0,0,21,86,23,5,0,22,14,0,0,0,0,0,21,112,23,5,0,22,14,0,0,0,14,0,21,126,23,5,0,22,23,5,0,22,14,0,21,135,0,0,21,130,23,5,0,22,14,0,0,0,106,99,101,109,23,5,0,22,101,136,100,106,99,101,131,100,0,0,0,0,0,100,106,99,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,37,0,0,0,0,0,0,150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,32,0,64,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,16,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,64,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,45,21,0,0,0,0,0,0,85,0,0,0,0,0,0,0,0,64,145,206,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,252,127,0,0,0,0,0,0,0,0,0,160,0,100,0,0,0,0,16,0,0,40,0,25,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,160,72,103,0,0,0,0,16,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,0,50,0,0,40,0,25,0,0,20,128,12,0,0,10,64,6,0,0,5,32,3,0,128,2,144,1,0,64,1,200,0,0,160,0,100,0,0,80,0,50,0,0,40,0,25,0,0,20,128,12,0,0,10,64,6,0,0,5,32,3,0,128,2,144,1,254,191,0,0,0,0,0,1,128,129,255,143,0,0,0,0,0,12,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,0,0,32,0,0,128,255,15,0,0,0,0,0,0,0,0,0,8,16,0,0,0,1,0,0,0,0,0,0,0,0,124,0,0,0,0,60,0,0,0,0,28,0,0,0,0,12,0,0,0,252,7,0,0,0,252,3,0,0,0,252,1,0,0,0,252,0,0,0,248,127,0,0,0,248,63,0,0,0,248,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,8,0,0,0,64,4,0,0,5,32,3,0,128,2,144,1,0,0,0,0,60,0,64,0,32,0,0,0,0,0,15,0,0,0,128,7,0,20,128,12,112,192,1,192,7,0,0,0,0,0,0,128,2,144,1,0,0,2,0,0,0,0,1,0,0,0,128,0,0,0,0,64,0,0,224,255,67,0,0,240,255,1,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,16,0,0,0,0,1,0,0,0,0,0,0,0,0,4,0,0,32,0,0,0,0,255,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,252,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,10,64,6,0,0,0,0,0,0,0,0,128,0,0,0,0,0,60,0,160,72,103,0,0,80,0,50,192,1,7,0,31,0,0,32,0,0,240,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,255,31,0,0,0,0,0,64,0,0,0,40,0,25,0,0,0,0,0,112,192,1,192,7,248,255,16,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,139,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,100,161,240,3,0,208,72,0,12,64,128,79,252,111,79,192,16,5,0,0,0,0,0,0,69,0,0,0,39,0,0,0,0,1,0,];

    #[allow(dead_code)]
    pub fn parse<'lexer, 'input: 'lexer>(lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>)
          -> (::std::option::Option<Result<Body,lrpar::Lexeme<u32>>>, ::std::vec::Vec<::lrpar::LexParseError<u32>>)
    {
        let (grm, stable) = ::lrpar::ctbuilder::_reconstitute(__GRM_DATA, __STABLE_DATA);
        #[allow(clippy::type_complexity)]
        let mut actions: ::std::vec::Vec<&dyn Fn(::cfgrammar::RIdx<u32>,
                       &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                       ::lrpar::Span,
                       ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                    -> __GTActionsKind<'input>> = ::std::vec::Vec::new();
        actions.push(&__gt_wrapper_0);
        actions.push(&__gt_wrapper_1);
        actions.push(&__gt_wrapper_2);
        actions.push(&__gt_wrapper_3);
        actions.push(&__gt_wrapper_4);
        actions.push(&__gt_wrapper_5);
        actions.push(&__gt_wrapper_6);
        actions.push(&__gt_wrapper_7);
        actions.push(&__gt_wrapper_8);
        actions.push(&__gt_wrapper_9);
        actions.push(&__gt_wrapper_10);
        actions.push(&__gt_wrapper_11);
        actions.push(&__gt_wrapper_12);
        actions.push(&__gt_wrapper_13);
        actions.push(&__gt_wrapper_14);
        actions.push(&__gt_wrapper_15);
        actions.push(&__gt_wrapper_16);
        actions.push(&__gt_wrapper_17);
        actions.push(&__gt_wrapper_18);
        actions.push(&__gt_wrapper_19);
        actions.push(&__gt_wrapper_20);
        actions.push(&__gt_wrapper_21);
        actions.push(&__gt_wrapper_22);
        actions.push(&__gt_wrapper_23);
        actions.push(&__gt_wrapper_24);
        actions.push(&__gt_wrapper_25);
        actions.push(&__gt_wrapper_26);
        actions.push(&__gt_wrapper_27);
        actions.push(&__gt_wrapper_28);
        actions.push(&__gt_wrapper_29);
        actions.push(&__gt_wrapper_30);
        actions.push(&__gt_wrapper_31);
        actions.push(&__gt_wrapper_32);
        actions.push(&__gt_wrapper_33);
        actions.push(&__gt_wrapper_34);
        actions.push(&__gt_wrapper_35);
        actions.push(&__gt_wrapper_36);
        actions.push(&__gt_wrapper_37);
        actions.push(&__gt_wrapper_38);
        actions.push(&__gt_wrapper_39);
        actions.push(&__gt_wrapper_40);
        actions.push(&__gt_wrapper_41);
        actions.push(&__gt_wrapper_42);
        actions.push(&__gt_wrapper_43);
        actions.push(&__gt_wrapper_44);
        actions.push(&__gt_wrapper_45);
        actions.push(&__gt_wrapper_46);
        actions.push(&__gt_wrapper_47);
        actions.push(&__gt_wrapper_48);
        actions.push(&__gt_wrapper_49);
        actions.push(&__gt_wrapper_50);
        actions.push(&__gt_wrapper_51);
        actions.push(&__gt_wrapper_52);
        actions.push(&__gt_wrapper_53);
        actions.push(&__gt_wrapper_54);
        actions.push(&__gt_wrapper_55);
        actions.push(&__gt_wrapper_56);
        actions.push(&__gt_wrapper_57);
        actions.push(&__gt_wrapper_58);
        actions.push(&__gt_wrapper_59);
        actions.push(&__gt_wrapper_60);
        actions.push(&__gt_wrapper_61);
        actions.push(&__gt_wrapper_62);
        actions.push(&__gt_wrapper_63);
        actions.push(&__gt_wrapper_64);
        actions.push(&__gt_wrapper_65);
        actions.push(&__gt_wrapper_66);
        actions.push(&__gt_wrapper_67);
        actions.push(&__gt_wrapper_68);

        match ::lrpar::RTParserBuilder::new(&grm, &stable)
            .recoverer(::lrpar::RecoveryKind::None)
            .parse_actions(lexer, &actions) {
                (Some(__GTActionsKind::AK1(x)), y) => (Some(x), y),
                (None, y) => (None, y),
                _ => unreachable!()
        }
    }

    #[allow(dead_code)]
    pub const R_PROGRAMPARSER: u32 = 1;
    #[allow(dead_code)]
    pub const R_STTMNTSCOLL: u32 = 2;
    #[allow(dead_code)]
    pub const R_STTMNTS: u32 = 3;
    #[allow(dead_code)]
    pub const R_STTMNT: u32 = 4;
    #[allow(dead_code)]
    pub const R_TERM: u32 = 5;
    #[allow(dead_code)]
    pub const R_EXPR: u32 = 6;
    #[allow(dead_code)]
    pub const R_COND: u32 = 7;
    #[allow(dead_code)]
    pub const R_ASSIGNMENT: u32 = 8;
    #[allow(dead_code)]
    pub const R_DECFUNCARG: u32 = 9;
    #[allow(dead_code)]
    pub const R_FUNCARGDECLIST: u32 = 10;
    #[allow(dead_code)]
    pub const R_DECFUNCARGS: u32 = 11;
    #[allow(dead_code)]
    pub const R_DECFUNC: u32 = 12;
    #[allow(dead_code)]
    pub const R_FUNC: u32 = 13;
    #[allow(dead_code)]
    pub const R_FUNCARGS: u32 = 14;
    #[allow(dead_code)]
    pub const R_ARGLIST: u32 = 15;
    #[allow(dead_code)]
    pub const R_DECCMP: u32 = 16;
    #[allow(dead_code)]
    pub const R_COMPARG: u32 = 17;
    #[allow(dead_code)]
    pub const R_NUM: u32 = 18;
    #[allow(dead_code)]
    pub const R_BOOL: u32 = 19;
    #[allow(dead_code)]
    pub const R_IDENTIFIER: u32 = 20;
    #[allow(dead_code)]
    pub const R_TEMPLATEVAR: u32 = 21;
    #[allow(dead_code)]
    pub const R_TYPEINFO: u32 = 22;
    const __GT_EPP: &[::std::option::Option<&str>] = &[Some("SEMI"), Some("ADD"), Some("SUB"), Some("MUL"), Some("DIV"), Some("EQ"), Some("NE"), Some("GT"), Some("LT"), Some("GE"), Some("LE"), Some("AND"), Some("OR"), Some("XOR"), Some("LPAR"), Some("RPAR"), Some("IF"), Some("RBRACE"), Some("LBRACE"), Some("ELSE"), Some("CONST"), Some("COLON"), Some("ASSIGN"), Some("LET"), Some("COMMA"), Some("FN"), Some("COMP"), Some("NUM"), Some("TRUE"), Some("FALSE"), Some("IDENT"), Some("TEMPLATE_START"), Some("TEMPLATE_ASSIGN"), Some("TEMPLATE_FALLBACK"), Some("INT"), Some("BOOL"), Some("VEC_INT"), Some("VEC_BOOL"), None];

    /// Return the %epp entry for token `tidx` (where `None` indicates "the token has no
    /// pretty-printed value"). Panics if `tidx` doesn't exist.
    #[allow(dead_code)]
    pub fn token_epp<'a>(tidx: ::cfgrammar::TIdx<u32>) -> ::std::option::Option<&'a str> {
        __GT_EPP[usize::from(tidx)]
    }

    // Wrappers

    fn __gt_wrapper_0<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK2(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK1(__gt_action_0(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_1<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK3(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK5(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK2(__gt_action_1(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2))
    }

    fn __gt_wrapper_2<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK5(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK2(__gt_action_2(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_3<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK3(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK4(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK3(__gt_action_3(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2))
    }

    fn __gt_wrapper_4<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK4(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK3(__gt_action_4(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_5<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK8(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        __GTActionsKind::AK4(__gt_action_5(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2))
    }

    fn __gt_wrapper_6<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK16(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        __GTActionsKind::AK4(__gt_action_6(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2))
    }

    fn __gt_wrapper_7<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK12(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK4(__gt_action_7(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_8<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK5(__gt_action_8(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_9<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK6(__gt_action_9(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3))
    }

    fn __gt_wrapper_10<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK6(__gt_action_10(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3))
    }

    fn __gt_wrapper_11<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK6(__gt_action_11(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3))
    }

    fn __gt_wrapper_12<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK6(__gt_action_12(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3))
    }

    fn __gt_wrapper_13<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK6(__gt_action_13(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3))
    }

    fn __gt_wrapper_14<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK6(__gt_action_14(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3))
    }

    fn __gt_wrapper_15<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK6(__gt_action_15(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3))
    }

    fn __gt_wrapper_16<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK6(__gt_action_16(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3))
    }

    fn __gt_wrapper_17<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK6(__gt_action_17(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3))
    }

    fn __gt_wrapper_18<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK6(__gt_action_18(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3))
    }

    fn __gt_wrapper_19<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK6(__gt_action_19(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3))
    }

    fn __gt_wrapper_20<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK6(__gt_action_20(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3))
    }

    fn __gt_wrapper_21<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK6(__gt_action_21(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3))
    }

    fn __gt_wrapper_22<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        __GTActionsKind::AK6(__gt_action_22(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3))
    }

    fn __gt_wrapper_23<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK7(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK6(__gt_action_23(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_24<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK13(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK6(__gt_action_24(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_25<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK18(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK6(__gt_action_25(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_26<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK20(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK6(__gt_action_26(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_27<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK21(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK6(__gt_action_27(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_28<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_4 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_5 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_6 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_7 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_8 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_9 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        __GTActionsKind::AK7(__gt_action_28(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3, __gt_arg_4, __gt_arg_5, __gt_arg_6, __gt_arg_7, __gt_arg_8, __gt_arg_9))
    }

    fn __gt_wrapper_29<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK20(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_4 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK22(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_5 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_6 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK8(__gt_action_29(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3, __gt_arg_4, __gt_arg_5, __gt_arg_6))
    }

    fn __gt_wrapper_30<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK20(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_4 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK8(__gt_action_30(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3, __gt_arg_4))
    }

    fn __gt_wrapper_31<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK20(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_4 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK22(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_5 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_6 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK8(__gt_action_31(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3, __gt_arg_4, __gt_arg_5, __gt_arg_6))
    }

    fn __gt_wrapper_32<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK20(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_4 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK8(__gt_action_32(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3, __gt_arg_4))
    }

    fn __gt_wrapper_33<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK20(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK22(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK9(__gt_action_33(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3))
    }

    fn __gt_wrapper_34<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK10(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK9(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK10(__gt_action_34(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3))
    }

    fn __gt_wrapper_35<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK9(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK10(__gt_action_35(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_36<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        __GTActionsKind::AK11(__gt_action_36(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2))
    }

    fn __gt_wrapper_37<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK10(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        __GTActionsKind::AK11(__gt_action_37(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3))
    }

    fn __gt_wrapper_38<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK20(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK11(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_4 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK22(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_5 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_6 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK2(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_7 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        __GTActionsKind::AK12(__gt_action_38(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3, __gt_arg_4, __gt_arg_5, __gt_arg_6, __gt_arg_7))
    }

    fn __gt_wrapper_39<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK20(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK14(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK13(__gt_action_39(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2))
    }

    fn __gt_wrapper_40<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        __GTActionsKind::AK14(__gt_action_40(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2))
    }

    fn __gt_wrapper_41<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK15(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        __GTActionsKind::AK14(__gt_action_41(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3))
    }

    fn __gt_wrapper_42<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK15(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK15(__gt_action_42(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3))
    }

    fn __gt_wrapper_43<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK15(__gt_action_43(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_44<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK20(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_4 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK17(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_5 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_6 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK17(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_7 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_8 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK17(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_9 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_10 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK22(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK16(__gt_action_44(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3, __gt_arg_4, __gt_arg_5, __gt_arg_6, __gt_arg_7, __gt_arg_8, __gt_arg_9, __gt_arg_10))
    }

    fn __gt_wrapper_45<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK19(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK17(__gt_action_45(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_46<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK18(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK17(__gt_action_46(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_47<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK21(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK17(__gt_action_47(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_48<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK20(x)) => x,
            _ => unreachable!()
        };
        __GTActionsKind::AK17(__gt_action_48(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_49<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        __GTActionsKind::AK17(__gt_action_49(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_50<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        __GTActionsKind::AK17(__gt_action_50(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_51<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        __GTActionsKind::AK17(__gt_action_51(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_52<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        __GTActionsKind::AK17(__gt_action_52(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_53<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        __GTActionsKind::AK17(__gt_action_53(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_54<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        __GTActionsKind::AK17(__gt_action_54(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_55<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        __GTActionsKind::AK18(__gt_action_55(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_56<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        __GTActionsKind::AK19(__gt_action_56(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_57<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        __GTActionsKind::AK19(__gt_action_57(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_58<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        __GTActionsKind::AK20(__gt_action_58(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_59<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK20(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_4 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK21(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_5 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        __GTActionsKind::AK21(__gt_action_59(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3, __gt_arg_4, __gt_arg_5))
    }

    fn __gt_wrapper_60<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK20(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_4 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_5 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        __GTActionsKind::AK21(__gt_action_60(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3, __gt_arg_4, __gt_arg_5))
    }

    fn __gt_wrapper_61<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK20(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_4 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK21(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_5 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        __GTActionsKind::AK21(__gt_action_61(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3, __gt_arg_4, __gt_arg_5))
    }

    fn __gt_wrapper_62<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK20(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_4 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_5 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        __GTActionsKind::AK21(__gt_action_62(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3, __gt_arg_4, __gt_arg_5))
    }

    fn __gt_wrapper_63<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK20(x)) => x,
            _ => unreachable!()
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        __GTActionsKind::AK21(__gt_action_63(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3))
    }

    fn __gt_wrapper_64<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        __GTActionsKind::AK22(__gt_action_64(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_65<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        __GTActionsKind::AK22(__gt_action_65(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_66<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        __GTActionsKind::AK22(__gt_action_66(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_67<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            },
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!()
        };
        __GTActionsKind::AK22(__gt_action_67(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_68<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                      __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                      __gt_span: ::lrpar::Span,
                      mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>)
                   -> __GTActionsKind<'input> {    unreachable!()
    }

    #[allow(dead_code)]
    enum __GTActionsKind<'input> {
        AK1(Result<Body,lrpar::Lexeme<u32>>),
        AK2(Result<Vec<Statement>,lrpar::Lexeme<u32>>),
        AK3(Result<Vec<Statement>,lrpar::Lexeme<u32>>),
        AK4(Result<Statement,lrpar::Lexeme<u32>>),
        AK5(Result<Statement,lrpar::Lexeme<u32>>),
        AK6(Result<Expression,lrpar::Lexeme<u32>>),
        AK7(Result<Conditional,lrpar::Lexeme<u32>>),
        AK8(Result<Assign,lrpar::Lexeme<u32>>),
        AK9(Result<FunctionArg,lrpar::Lexeme<u32>>),
        AK10(Result<Vec<FunctionArg>,lrpar::Lexeme<u32>>),
        AK11(Result<Vec<FunctionArg>,lrpar::Lexeme<u32>>),
        AK12(Result<FunctionDec,lrpar::Lexeme<u32>>),
        AK13(Result<Invoke,lrpar::Lexeme<u32>>),
        AK14(Result<Vec<Expression>,lrpar::Lexeme<u32>>),
        AK15(Result<Vec<Expression>,lrpar::Lexeme<u32>>),
        AK16(Result<CompositionalFunction,lrpar::Lexeme<u32>>),
        AK17(Result<CompositionalFunctionArg,lrpar::Lexeme<u32>>),
        AK18(Result<Span,lrpar::Lexeme<u32>>),
        AK19(Result<Span,lrpar::Lexeme<u32>>),
        AK20(Result<Ident,lrpar::Lexeme<u32>>),
        AK21(Result<Template,lrpar::Lexeme<u32>>),
        AK22(Result<Kind,lrpar::Lexeme<u32>>),
    ___GTActionsKindHidden(::std::marker::PhantomData<&'input ()>)
    }


// User code from the program section

use crate::internals::parser::span::{Span};
use crate::internals::parser::ast::kind::{Kind};
use crate::internals::parser::ast::args::{FunctionArg};
use crate::internals::parser::ast::func::{FunctionDec};
use crate::internals::parser::ast::comparg::{CompositionalFunctionArg,CompositionalFunction};
use crate::internals::parser::ast::ident::{Ident};
use crate::internals::parser::ast::invoke::{Invoke};
use crate::internals::parser::ast::expr::{Expression};
use crate::internals::parser::ast::template::{Template,TemplateBehavior};
use crate::internals::parser::ast::assign::{Assign};
use crate::internals::parser::ast::op::{Op,Operation};
use crate::internals::parser::ast::statement::{Statement,Body};
use crate::internals::parser::ast::condition::{Conditional};

    // User actions

    // ProgramParser
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_0<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Vec<Statement>,lrpar::Lexeme<u32>>) 
->                  Result<Body,lrpar::Lexeme<u32>> {
Body::new(__gt_arg_1?, Span::into(__gt_lexer,__gt_span))
    }

    // SttmntsColl
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_1<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Vec<Statement>,lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: Result<Statement,lrpar::Lexeme<u32>>) 
->                  Result<Vec<Statement>,lrpar::Lexeme<u32>> {
{let mut v = __gt_arg_1?; v.push(__gt_arg_2?); Ok(v)}
    }

    // SttmntsColl
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_2<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Statement,lrpar::Lexeme<u32>>) 
->                  Result<Vec<Statement>,lrpar::Lexeme<u32>> {
Ok(vec![__gt_arg_1?])
    }

    // Sttmnts
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_3<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Vec<Statement>,lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: Result<Statement,lrpar::Lexeme<u32>>) 
->                  Result<Vec<Statement>,lrpar::Lexeme<u32>> {
{let mut v = __gt_arg_1?; v.push(__gt_arg_2?); Ok(v) }
    }

    // Sttmnts
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_4<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Statement,lrpar::Lexeme<u32>>) 
->                  Result<Vec<Statement>,lrpar::Lexeme<u32>> {
Ok(vec![__gt_arg_1?])
    }

    // Sttmnt
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_5<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Assign,lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>) 
->                  Result<Statement,lrpar::Lexeme<u32>> {
Statement::new(__gt_arg_1?, Span::into(__gt_lexer,__gt_span))
    }

    // Sttmnt
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_6<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<CompositionalFunction,lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>) 
->                  Result<Statement,lrpar::Lexeme<u32>> {
Statement::new(__gt_arg_1?, Span::into(__gt_lexer,__gt_span))
    }

    // Sttmnt
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_7<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<FunctionDec,lrpar::Lexeme<u32>>) 
->                  Result<Statement,lrpar::Lexeme<u32>> {
Statement::new(__gt_arg_1?, Span::into(__gt_lexer,__gt_span))
    }

    // Term
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_8<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Expression,lrpar::Lexeme<u32>>) 
->                  Result<Statement,lrpar::Lexeme<u32>> {
Statement::new(__gt_arg_1?, Span::into(__gt_lexer,__gt_span))
    }

    // Expr
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_9<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Expression,lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: Result<Expression,lrpar::Lexeme<u32>>) 
->                  Result<Expression,lrpar::Lexeme<u32>> {
Expression::new(Operation::new(__gt_arg_1?,Op::ADD,__gt_arg_3?,Span::into(__gt_lexer,__gt_span))?, Span::into(__gt_lexer,__gt_span))
    }

    // Expr
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_10<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Expression,lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: Result<Expression,lrpar::Lexeme<u32>>) 
->                  Result<Expression,lrpar::Lexeme<u32>> {
Expression::new(Operation::new(__gt_arg_1?,Op::SUB,__gt_arg_3?,Span::into(__gt_lexer,__gt_span))?, Span::into(__gt_lexer,__gt_span))
    }

    // Expr
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_11<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Expression,lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: Result<Expression,lrpar::Lexeme<u32>>) 
->                  Result<Expression,lrpar::Lexeme<u32>> {
Expression::new(Operation::new(__gt_arg_1?,Op::MUL,__gt_arg_3?,Span::into(__gt_lexer,__gt_span))?, Span::into(__gt_lexer,__gt_span))
    }

    // Expr
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_12<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Expression,lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: Result<Expression,lrpar::Lexeme<u32>>) 
->                  Result<Expression,lrpar::Lexeme<u32>> {
Expression::new(Operation::new(__gt_arg_1?,Op::DIV,__gt_arg_3?,Span::into(__gt_lexer,__gt_span))?, Span::into(__gt_lexer,__gt_span))
    }

    // Expr
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_13<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Expression,lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: Result<Expression,lrpar::Lexeme<u32>>) 
->                  Result<Expression,lrpar::Lexeme<u32>> {
Expression::new(Operation::new(__gt_arg_1?,Op::EQ ,__gt_arg_3?,Span::into(__gt_lexer,__gt_span))?, Span::into(__gt_lexer,__gt_span))
    }

    // Expr
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_14<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Expression,lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: Result<Expression,lrpar::Lexeme<u32>>) 
->                  Result<Expression,lrpar::Lexeme<u32>> {
Expression::new(Operation::new(__gt_arg_1?,Op::NE ,__gt_arg_3?,Span::into(__gt_lexer,__gt_span))?, Span::into(__gt_lexer,__gt_span))
    }

    // Expr
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_15<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Expression,lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: Result<Expression,lrpar::Lexeme<u32>>) 
->                  Result<Expression,lrpar::Lexeme<u32>> {
Expression::new(Operation::new(__gt_arg_1?,Op::GT ,__gt_arg_3?,Span::into(__gt_lexer,__gt_span))?, Span::into(__gt_lexer,__gt_span))
    }

    // Expr
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_16<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Expression,lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: Result<Expression,lrpar::Lexeme<u32>>) 
->                  Result<Expression,lrpar::Lexeme<u32>> {
Expression::new(Operation::new(__gt_arg_1?,Op::LT ,__gt_arg_3?,Span::into(__gt_lexer,__gt_span))?, Span::into(__gt_lexer,__gt_span))
    }

    // Expr
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_17<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Expression,lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: Result<Expression,lrpar::Lexeme<u32>>) 
->                  Result<Expression,lrpar::Lexeme<u32>> {
Expression::new(Operation::new(__gt_arg_1?,Op::GE ,__gt_arg_3?,Span::into(__gt_lexer,__gt_span))?, Span::into(__gt_lexer,__gt_span))
    }

    // Expr
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_18<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Expression,lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: Result<Expression,lrpar::Lexeme<u32>>) 
->                  Result<Expression,lrpar::Lexeme<u32>> {
Expression::new(Operation::new(__gt_arg_1?,Op::LE ,__gt_arg_3?,Span::into(__gt_lexer,__gt_span))?, Span::into(__gt_lexer,__gt_span))
    }

    // Expr
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_19<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Expression,lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: Result<Expression,lrpar::Lexeme<u32>>) 
->                  Result<Expression,lrpar::Lexeme<u32>> {
Expression::new(Operation::new(__gt_arg_1?,Op::AND,__gt_arg_3?,Span::into(__gt_lexer,__gt_span))?, Span::into(__gt_lexer,__gt_span))
    }

    // Expr
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_20<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Expression,lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: Result<Expression,lrpar::Lexeme<u32>>) 
->                  Result<Expression,lrpar::Lexeme<u32>> {
Expression::new(Operation::new(__gt_arg_1?,Op::OR ,__gt_arg_3?,Span::into(__gt_lexer,__gt_span))?, Span::into(__gt_lexer,__gt_span))
    }

    // Expr
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_21<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Expression,lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: Result<Expression,lrpar::Lexeme<u32>>) 
->                  Result<Expression,lrpar::Lexeme<u32>> {
Expression::new(Operation::new(__gt_arg_1?,Op::XOR,__gt_arg_3?,Span::into(__gt_lexer,__gt_span))?, Span::into(__gt_lexer,__gt_span))
    }

    // Expr
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_22<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: Result<Expression,lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>) 
->                  Result<Expression,lrpar::Lexeme<u32>> {
Expression::new(__gt_arg_2?, Span::into(__gt_lexer,__gt_span))
    }

    // Expr
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_23<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Conditional,lrpar::Lexeme<u32>>) 
->                  Result<Expression,lrpar::Lexeme<u32>> {
Expression::new(__gt_arg_1?, Span::into(__gt_lexer,__gt_span))
    }

    // Expr
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_24<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Invoke,lrpar::Lexeme<u32>>) 
->                  Result<Expression,lrpar::Lexeme<u32>> {
Expression::new(__gt_arg_1?, Span::into(__gt_lexer,__gt_span))
    }

    // Expr
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_25<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Span,lrpar::Lexeme<u32>>) 
->                  Result<Expression,lrpar::Lexeme<u32>> {
Expression::new(__gt_arg_1?, Span::into(__gt_lexer,__gt_span))
    }

    // Expr
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_26<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Ident,lrpar::Lexeme<u32>>) 
->                  Result<Expression,lrpar::Lexeme<u32>> {
Expression::new(__gt_arg_1?, Span::into(__gt_lexer,__gt_span))
    }

    // Expr
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_27<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Template,lrpar::Lexeme<u32>>) 
->                  Result<Expression,lrpar::Lexeme<u32>> {
Expression::new(__gt_arg_1?, Span::into(__gt_lexer,__gt_span))
    }

    // Cond
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_28<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: Result<Expression,lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_4: Result<Expression,lrpar::Lexeme<u32>>,
                     mut __gt_arg_5: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_6: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_7: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_8: Result<Expression,lrpar::Lexeme<u32>>,
                     mut __gt_arg_9: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>) 
->                  Result<Conditional,lrpar::Lexeme<u32>> {
Conditional::new(__gt_arg_2?, __gt_arg_4?, __gt_arg_8?, Span::into(__gt_lexer, __gt_span))
    }

    // Assignment
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_29<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: Result<Ident,lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_4: Result<Kind,lrpar::Lexeme<u32>>,
                     mut __gt_arg_5: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_6: Result<Expression,lrpar::Lexeme<u32>>) 
->                  Result<Assign,lrpar::Lexeme<u32>> {
Assign::new(__gt_arg_2?, true, __gt_arg_4?, __gt_arg_6?, Span::into(__gt_lexer,__gt_span))
    }

    // Assignment
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_30<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: Result<Ident,lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_4: Result<Expression,lrpar::Lexeme<u32>>) 
->                  Result<Assign,lrpar::Lexeme<u32>> {
Assign::new(__gt_arg_2?, true, None, __gt_arg_4?, Span::into(__gt_lexer,__gt_span))
    }

    // Assignment
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_31<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: Result<Ident,lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_4: Result<Kind,lrpar::Lexeme<u32>>,
                     mut __gt_arg_5: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_6: Result<Expression,lrpar::Lexeme<u32>>) 
->                  Result<Assign,lrpar::Lexeme<u32>> {
Assign::new(__gt_arg_2?, false, __gt_arg_4?, __gt_arg_6?, Span::into(__gt_lexer,__gt_span))
    }

    // Assignment
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_32<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: Result<Ident,lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_4: Result<Expression,lrpar::Lexeme<u32>>) 
->                  Result<Assign,lrpar::Lexeme<u32>> {
Assign::new(__gt_arg_2?, false, None, __gt_arg_4?, Span::into(__gt_lexer,__gt_span))
    }

    // DecFuncArg
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_33<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Ident,lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: Result<Kind,lrpar::Lexeme<u32>>) 
->                  Result<FunctionArg,lrpar::Lexeme<u32>> {
FunctionArg::new(__gt_arg_1?,__gt_arg_3?,Span::into(__gt_lexer,__gt_span))
    }

    // FuncArgDecList
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_34<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Vec<FunctionArg>,lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: Result<FunctionArg,lrpar::Lexeme<u32>>) 
->                  Result<Vec<FunctionArg>,lrpar::Lexeme<u32>> {
let mut v = __gt_arg_1?; v.push(__gt_arg_3?); Ok(v)
    }

    // FuncArgDecList
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_35<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<FunctionArg,lrpar::Lexeme<u32>>) 
->                  Result<Vec<FunctionArg>,lrpar::Lexeme<u32>> {
Ok(vec![__gt_arg_1?])
    }

    // DecFuncArgs
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_36<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>) 
->                  Result<Vec<FunctionArg>,lrpar::Lexeme<u32>> {
Ok(Vec::new())
    }

    // DecFuncArgs
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_37<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: Result<Vec<FunctionArg>,lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>) 
->                  Result<Vec<FunctionArg>,lrpar::Lexeme<u32>> {
Ok(__gt_arg_2?)
    }

    // DecFunc
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_38<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: Result<Ident,lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: Result<Vec<FunctionArg>,lrpar::Lexeme<u32>>,
                     mut __gt_arg_4: Result<Kind,lrpar::Lexeme<u32>>,
                     mut __gt_arg_5: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_6: Result<Vec<Statement>,lrpar::Lexeme<u32>>,
                     mut __gt_arg_7: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>) 
->                  Result<FunctionDec,lrpar::Lexeme<u32>> {
FunctionDec::new(__gt_arg_2?,__gt_arg_3?,__gt_arg_6?,__gt_arg_4?,Span::into(__gt_lexer,__gt_span))
    }

    // Func
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_39<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Ident,lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: Result<Vec<Expression>,lrpar::Lexeme<u32>>) 
->                  Result<Invoke,lrpar::Lexeme<u32>> {
Invoke::new(__gt_arg_1?, __gt_arg_2?, Span::into(__gt_lexer,__gt_span))
    }

    // FuncArgs
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_40<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>) 
->                  Result<Vec<Expression>,lrpar::Lexeme<u32>> {
Ok(Vec::new())
    }

    // FuncArgs
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_41<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: Result<Vec<Expression>,lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>) 
->                  Result<Vec<Expression>,lrpar::Lexeme<u32>> {
Ok(__gt_arg_2?)
    }

    // ArgList
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_42<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Vec<Expression>,lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: Result<Expression,lrpar::Lexeme<u32>>) 
->                  Result<Vec<Expression>,lrpar::Lexeme<u32>> {
let mut v = __gt_arg_1?; v.push(__gt_arg_3?); Ok(v)
    }

    // ArgList
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_43<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Expression,lrpar::Lexeme<u32>>) 
->                  Result<Vec<Expression>,lrpar::Lexeme<u32>> {
Ok( vec![__gt_arg_1?] )
    }

    // DecCmp
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_44<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: Result<Ident,lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_4: Result<CompositionalFunctionArg,lrpar::Lexeme<u32>>,
                     mut __gt_arg_5: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_6: Result<CompositionalFunctionArg,lrpar::Lexeme<u32>>,
                     mut __gt_arg_7: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_8: Result<CompositionalFunctionArg,lrpar::Lexeme<u32>>,
                     mut __gt_arg_9: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_10: Result<Kind,lrpar::Lexeme<u32>>) 
->                  Result<CompositionalFunction,lrpar::Lexeme<u32>> {
CompositionalFunction::new(__gt_arg_2?,__gt_arg_4?,__gt_arg_6?,__gt_arg_8?,__gt_arg_10?,Span::into(__gt_lexer,__gt_span))
    }

    // CompArg
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_45<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Span,lrpar::Lexeme<u32>>) 
->                  Result<CompositionalFunctionArg,lrpar::Lexeme<u32>> {
CompositionalFunctionArg::new(__gt_arg_1?,Span::into(__gt_lexer,__gt_span))
    }

    // CompArg
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_46<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Span,lrpar::Lexeme<u32>>) 
->                  Result<CompositionalFunctionArg,lrpar::Lexeme<u32>> {
CompositionalFunctionArg::new(__gt_arg_1?,Span::into(__gt_lexer,__gt_span))
    }

    // CompArg
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_47<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Template,lrpar::Lexeme<u32>>) 
->                  Result<CompositionalFunctionArg,lrpar::Lexeme<u32>> {
CompositionalFunctionArg::new(__gt_arg_1?,Span::into(__gt_lexer,__gt_span))
    }

    // CompArg
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_48<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: Result<Ident,lrpar::Lexeme<u32>>) 
->                  Result<CompositionalFunctionArg,lrpar::Lexeme<u32>> {
CompositionalFunctionArg::new(__gt_arg_1?,Span::into(__gt_lexer,__gt_span))
    }

    // CompArg
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_49<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>) 
->                  Result<CompositionalFunctionArg,lrpar::Lexeme<u32>> {
CompositionalFunctionArg::new(Op::ADD,Span::into(__gt_lexer,__gt_span))
    }

    // CompArg
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_50<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>) 
->                  Result<CompositionalFunctionArg,lrpar::Lexeme<u32>> {
CompositionalFunctionArg::new(Op::SUB,Span::into(__gt_lexer,__gt_span))
    }

    // CompArg
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_51<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>) 
->                  Result<CompositionalFunctionArg,lrpar::Lexeme<u32>> {
CompositionalFunctionArg::new(Op::MUL,Span::into(__gt_lexer,__gt_span))
    }

    // CompArg
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_52<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>) 
->                  Result<CompositionalFunctionArg,lrpar::Lexeme<u32>> {
CompositionalFunctionArg::new(Op::AND,Span::into(__gt_lexer,__gt_span))
    }

    // CompArg
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_53<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>) 
->                  Result<CompositionalFunctionArg,lrpar::Lexeme<u32>> {
CompositionalFunctionArg::new(Op::OR,Span::into(__gt_lexer,__gt_span))
    }

    // CompArg
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_54<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>) 
->                  Result<CompositionalFunctionArg,lrpar::Lexeme<u32>> {
CompositionalFunctionArg::new(Op::XOR,Span::into(__gt_lexer,__gt_span))
    }

    // Num
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_55<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>) 
->                  Result<Span,lrpar::Lexeme<u32>> {
Ok(Span::new(__gt_lexer, None, __gt_span)?)
    }

    // Bool
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_56<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>) 
->                  Result<Span,lrpar::Lexeme<u32>> {
Ok(Span::new(__gt_lexer,None,__gt_span)?)
    }

    // Bool
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_57<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>) 
->                  Result<Span,lrpar::Lexeme<u32>> {
Ok(Span::new(__gt_lexer,None,__gt_span)?)
    }

    // Identifier
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_58<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>) 
->                  Result<Ident,lrpar::Lexeme<u32>> {
Ok( Ident::new( Span::new(__gt_lexer, None, __gt_span)? ) )
    }

    // TemplateVar
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_59<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: Result<Ident,lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_4: Result<Template,lrpar::Lexeme<u32>>,
                     mut __gt_arg_5: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>) 
->                  Result<Template,lrpar::Lexeme<u32>> {
Ok(Template::new(__gt_arg_2?, Span::new(__gt_lexer, None, __gt_span)?, TemplateBehavior::assign(__gt_arg_4?)))
    }

    // TemplateVar
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_60<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: Result<Ident,lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_4: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_5: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>) 
->                  Result<Template,lrpar::Lexeme<u32>> {
Ok(Template::new(__gt_arg_2?, Span::new(__gt_lexer, None, __gt_span)?, TemplateBehavior::assign(Span::new(__gt_lexer, __gt_arg_4, None)?)))
    }

    // TemplateVar
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_61<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: Result<Ident,lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_4: Result<Template,lrpar::Lexeme<u32>>,
                     mut __gt_arg_5: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>) 
->                  Result<Template,lrpar::Lexeme<u32>> {
Ok(Template::new(__gt_arg_2?, Span::new(__gt_lexer, None, __gt_span)?, TemplateBehavior::fallback(__gt_arg_4?)))
    }

    // TemplateVar
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_62<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: Result<Ident,lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_4: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_5: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>) 
->                  Result<Template,lrpar::Lexeme<u32>> {
Ok(Template::new(__gt_arg_2?, Span::new(__gt_lexer, None, __gt_span)?, TemplateBehavior::fallback(Span::new(__gt_lexer, __gt_arg_4, None)?)))
    }

    // TemplateVar
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_63<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
                     mut __gt_arg_2: Result<Ident,lrpar::Lexeme<u32>>,
                     mut __gt_arg_3: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>) 
->                  Result<Template,lrpar::Lexeme<u32>> {
Ok(Template::new(__gt_arg_2?, Span::new(__gt_lexer, None, __gt_span)?, None))
    }

    // TypeInfo
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_64<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>) 
->                  Result<Kind,lrpar::Lexeme<u32>> {
Ok(Kind::Int)
    }

    // TypeInfo
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_65<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>) 
->                  Result<Kind,lrpar::Lexeme<u32>> {
Ok(Kind::Bool)
    }

    // TypeInfo
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_66<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>) 
->                  Result<Kind,lrpar::Lexeme<u32>> {
Ok(Kind::CollOfInt)
    }

    // TypeInfo
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_67<'lexer, 'input: 'lexer>(__gt_ridx: ::cfgrammar::RIdx<u32>,
                     __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                     __gt_span: ::lrpar::Span,
                     mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>) 
->                  Result<Kind,lrpar::Lexeme<u32>> {
Ok(Kind::CollOfBool)
    }

}


/* CACHE INFORMATION
   Build time: "2022-02-21T19:15:27.051279600+00:00"
   Mod name: None
   Recoverer: None
   YaccKind: Some(Grmtools)
   Error on conflicts: true
   0 'SEMI'
   1 'ADD'
   2 'SUB'
   3 'MUL'
   4 'DIV'
   5 'EQ'
   6 'NE'
   7 'GT'
   8 'LT'
   9 'GE'
   10 'LE'
   11 'AND'
   12 'OR'
   13 'XOR'
   14 'LPAR'
   15 'RPAR'
   16 'IF'
   17 'RBRACE'
   18 'LBRACE'
   19 'ELSE'
   20 'CONST'
   21 'COLON'
   22 'ASSIGN'
   23 'LET'
   24 'COMMA'
   25 'FN'
   26 'COMP'
   27 'NUM'
   28 'TRUE'
   29 'FALSE'
   30 'IDENT'
   31 'TEMPLATE_START'
   32 'TEMPLATE_ASSIGN'
   33 'TEMPLATE_FALLBACK'
   34 'INT'
   35 'BOOL'
   36 'VEC_INT'
   37 'VEC_BOOL'
   38 <unknown>
*/
