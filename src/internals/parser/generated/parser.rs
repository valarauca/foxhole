mod parser_y {
    #![allow(clippy::type_complexity)]
    #[allow(dead_code)]
    const __GRM_DATA: &[u8] = &[
        9, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 94, 4, 0, 0, 0, 0, 0, 0, 0, 69,
        120, 112, 114, 3, 0, 0, 0, 0, 0, 0, 0, 78, 117, 109, 10, 0, 0, 0, 0, 0, 0, 0, 65, 115, 115,
        105, 103, 110, 109, 101, 110, 116, 4, 0, 0, 0, 0, 0, 0, 0, 70, 117, 110, 99, 8, 0, 0, 0, 0,
        0, 0, 0, 70, 117, 110, 99, 65, 114, 103, 115, 7, 0, 0, 0, 0, 0, 0, 0, 65, 114, 103, 76,
        105, 115, 116, 10, 0, 0, 0, 0, 0, 0, 0, 73, 100, 101, 110, 116, 105, 102, 105, 101, 114,
        11, 0, 0, 0, 0, 0, 0, 0, 84, 101, 109, 112, 108, 97, 116, 101, 86, 97, 114, 12, 0, 0, 0, 0,
        0, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 78, 85, 77, 1, 3, 0, 0, 0, 0, 0, 0, 0, 76, 69, 84, 1,
        2, 0, 0, 0, 0, 0, 0, 0, 69, 81, 1, 4, 0, 0, 0, 0, 0, 0, 0, 76, 80, 65, 82, 1, 4, 0, 0, 0,
        0, 0, 0, 0, 82, 80, 65, 82, 1, 5, 0, 0, 0, 0, 0, 0, 0, 67, 79, 77, 77, 65, 1, 5, 0, 0, 0,
        0, 0, 0, 0, 73, 68, 69, 78, 84, 1, 14, 0, 0, 0, 0, 0, 0, 0, 84, 69, 77, 80, 76, 65, 84, 69,
        95, 83, 84, 65, 82, 84, 1, 15, 0, 0, 0, 0, 0, 0, 0, 84, 69, 77, 80, 76, 65, 84, 69, 95, 65,
        83, 83, 73, 71, 78, 1, 6, 0, 0, 0, 0, 0, 0, 0, 82, 66, 82, 65, 67, 69, 1, 17, 0, 0, 0, 0,
        0, 0, 0, 84, 69, 77, 80, 76, 65, 84, 69, 95, 70, 65, 76, 76, 66, 65, 67, 75, 0, 12, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0,
        0, 0, 0, 0, 78, 85, 77, 1, 3, 0, 0, 0, 0, 0, 0, 0, 76, 69, 84, 1, 2, 0, 0, 0, 0, 0, 0, 0,
        69, 81, 1, 4, 0, 0, 0, 0, 0, 0, 0, 76, 80, 65, 82, 1, 4, 0, 0, 0, 0, 0, 0, 0, 82, 80, 65,
        82, 1, 5, 0, 0, 0, 0, 0, 0, 0, 67, 79, 77, 77, 65, 1, 5, 0, 0, 0, 0, 0, 0, 0, 73, 68, 69,
        78, 84, 1, 14, 0, 0, 0, 0, 0, 0, 0, 84, 69, 77, 80, 76, 65, 84, 69, 95, 83, 84, 65, 82, 84,
        1, 15, 0, 0, 0, 0, 0, 0, 0, 84, 69, 77, 80, 76, 65, 84, 69, 95, 65, 83, 83, 73, 71, 78, 1,
        6, 0, 0, 0, 0, 0, 0, 0, 82, 66, 82, 65, 67, 69, 1, 17, 0, 0, 0, 0, 0, 0, 0, 84, 69, 77, 80,
        76, 65, 84, 69, 95, 70, 65, 76, 76, 66, 65, 67, 75, 0, 12, 0, 0, 0, 11, 0, 0, 0, 18, 0, 0,
        0, 17, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0,
        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0,
        0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0,
        0, 0, 0, 5, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0,
        0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 1, 0, 0, 0, 4,
        0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
        0, 0, 0, 6, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0,
        0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 9, 0, 0, 0, 5, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 1, 0, 0, 0, 9, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 0,
        0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 9, 0, 0,
        0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 10,
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 9, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        0, 7, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 4, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4,
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 2, 0, 0,
        0, 0, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 1,
        0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 14, 0,
        0, 0, 15, 0, 0, 0, 16, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,
        0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 6,
        0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0,
        0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0,
        0, 0, 0, 0, 0, 0, 1, 50, 0, 0, 0, 0, 0, 0, 0, 69, 120, 112, 114, 101, 115, 115, 105, 111,
        110, 58, 58, 105, 110, 118, 111, 107, 101, 40, 36, 49, 63, 44, 32, 83, 112, 97, 110, 58,
        58, 105, 110, 116, 111, 40, 36, 108, 101, 120, 101, 114, 44, 32, 36, 115, 112, 97, 110, 41,
        41, 1, 47, 0, 0, 0, 0, 0, 0, 0, 69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 58, 58,
        110, 117, 109, 40, 36, 49, 63, 44, 32, 83, 112, 97, 110, 58, 58, 105, 110, 116, 111, 40,
        36, 108, 101, 120, 101, 114, 44, 32, 36, 115, 112, 97, 110, 41, 41, 1, 46, 0, 0, 0, 0, 0,
        0, 0, 69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 58, 58, 118, 97, 114, 40, 36, 49,
        63, 44, 83, 112, 97, 110, 58, 58, 105, 110, 116, 111, 40, 36, 108, 101, 120, 101, 114, 44,
        32, 36, 115, 112, 97, 110, 41, 41, 1, 51, 0, 0, 0, 0, 0, 0, 0, 69, 120, 112, 114, 101, 115,
        115, 105, 111, 110, 58, 58, 116, 101, 109, 112, 108, 97, 116, 101, 40, 36, 49, 63, 44, 32,
        83, 112, 97, 110, 58, 58, 105, 110, 116, 111, 40, 36, 108, 101, 120, 101, 114, 44, 36, 115,
        112, 97, 110, 41, 41, 1, 35, 0, 0, 0, 0, 0, 0, 0, 79, 107, 40, 83, 112, 97, 110, 58, 58,
        110, 101, 119, 40, 36, 108, 101, 120, 101, 114, 44, 32, 78, 111, 110, 101, 44, 32, 36, 115,
        112, 97, 110, 41, 63, 41, 1, 47, 0, 0, 0, 0, 0, 0, 0, 65, 115, 115, 105, 103, 110, 58, 58,
        110, 101, 119, 40, 36, 50, 63, 44, 32, 36, 52, 63, 44, 32, 83, 112, 97, 110, 58, 58, 105,
        110, 116, 111, 40, 36, 108, 101, 120, 101, 114, 44, 36, 115, 112, 97, 110, 41, 41, 1, 47,
        0, 0, 0, 0, 0, 0, 0, 73, 110, 118, 111, 107, 101, 58, 58, 110, 101, 119, 40, 36, 49, 63,
        44, 32, 36, 50, 63, 44, 32, 83, 112, 97, 110, 58, 58, 105, 110, 116, 111, 40, 36, 108, 101,
        120, 101, 114, 44, 36, 115, 112, 97, 110, 41, 41, 1, 14, 0, 0, 0, 0, 0, 0, 0, 79, 107, 40,
        86, 101, 99, 58, 58, 110, 101, 119, 40, 41, 41, 1, 7, 0, 0, 0, 0, 0, 0, 0, 79, 107, 40, 36,
        50, 63, 41, 1, 35, 0, 0, 0, 0, 0, 0, 0, 108, 101, 116, 32, 109, 117, 116, 32, 118, 32, 61,
        32, 36, 49, 63, 59, 32, 118, 46, 112, 117, 115, 104, 40, 36, 51, 63, 41, 59, 32, 79, 107,
        40, 118, 41, 1, 15, 0, 0, 0, 0, 0, 0, 0, 79, 107, 40, 32, 118, 101, 99, 33, 91, 36, 49, 63,
        93, 32, 41, 1, 51, 0, 0, 0, 0, 0, 0, 0, 79, 107, 40, 32, 73, 100, 101, 110, 116, 58, 58,
        110, 101, 119, 40, 32, 83, 112, 97, 110, 58, 58, 110, 101, 119, 40, 36, 108, 101, 120, 101,
        114, 44, 32, 78, 111, 110, 101, 44, 32, 36, 115, 112, 97, 110, 41, 63, 32, 41, 32, 41, 1,
        86, 0, 0, 0, 0, 0, 0, 0, 79, 107, 40, 84, 101, 109, 112, 108, 97, 116, 101, 58, 58, 110,
        101, 119, 40, 36, 50, 63, 44, 32, 83, 112, 97, 110, 58, 58, 110, 101, 119, 40, 36, 108,
        101, 120, 101, 114, 44, 32, 78, 111, 110, 101, 44, 32, 36, 115, 112, 97, 110, 41, 63, 44,
        32, 84, 101, 109, 112, 108, 97, 116, 101, 66, 101, 104, 97, 118, 105, 111, 114, 58, 58, 97,
        115, 115, 105, 103, 110, 40, 36, 52, 63, 41, 41, 41, 1, 111, 0, 0, 0, 0, 0, 0, 0, 79, 107,
        40, 84, 101, 109, 112, 108, 97, 116, 101, 58, 58, 110, 101, 119, 40, 36, 50, 63, 44, 32,
        83, 112, 97, 110, 58, 58, 110, 101, 119, 40, 36, 108, 101, 120, 101, 114, 44, 32, 78, 111,
        110, 101, 44, 32, 36, 115, 112, 97, 110, 41, 63, 44, 32, 84, 101, 109, 112, 108, 97, 116,
        101, 66, 101, 104, 97, 118, 105, 111, 114, 58, 58, 97, 115, 115, 105, 103, 110, 40, 83,
        112, 97, 110, 58, 58, 110, 101, 119, 40, 36, 108, 101, 120, 101, 114, 44, 32, 36, 52, 44,
        32, 78, 111, 110, 101, 41, 63, 41, 41, 41, 1, 88, 0, 0, 0, 0, 0, 0, 0, 79, 107, 40, 84,
        101, 109, 112, 108, 97, 116, 101, 58, 58, 110, 101, 119, 40, 36, 50, 63, 44, 32, 83, 112,
        97, 110, 58, 58, 110, 101, 119, 40, 36, 108, 101, 120, 101, 114, 44, 32, 78, 111, 110, 101,
        44, 32, 36, 115, 112, 97, 110, 41, 63, 44, 32, 84, 101, 109, 112, 108, 97, 116, 101, 66,
        101, 104, 97, 118, 105, 111, 114, 58, 58, 102, 97, 108, 108, 98, 97, 99, 107, 40, 36, 52,
        63, 41, 41, 41, 1, 113, 0, 0, 0, 0, 0, 0, 0, 79, 107, 40, 84, 101, 109, 112, 108, 97, 116,
        101, 58, 58, 110, 101, 119, 40, 36, 50, 63, 44, 32, 83, 112, 97, 110, 58, 58, 110, 101,
        119, 40, 36, 108, 101, 120, 101, 114, 44, 32, 78, 111, 110, 101, 44, 32, 36, 115, 112, 97,
        110, 41, 63, 44, 32, 84, 101, 109, 112, 108, 97, 116, 101, 66, 101, 104, 97, 118, 105, 111,
        114, 58, 58, 102, 97, 108, 108, 98, 97, 99, 107, 40, 83, 112, 97, 110, 58, 58, 110, 101,
        119, 40, 36, 108, 101, 120, 101, 114, 44, 32, 36, 52, 44, 32, 78, 111, 110, 101, 41, 63,
        41, 41, 41, 1, 61, 0, 0, 0, 0, 0, 0, 0, 79, 107, 40, 84, 101, 109, 112, 108, 97, 116, 101,
        58, 58, 110, 101, 119, 40, 36, 50, 63, 44, 32, 83, 112, 97, 110, 58, 58, 110, 101, 119, 40,
        36, 108, 101, 120, 101, 114, 44, 32, 78, 111, 110, 101, 44, 32, 36, 115, 112, 97, 110, 41,
        63, 44, 32, 78, 111, 110, 101, 41, 41, 0, 1, 91, 1, 0, 0, 0, 0, 0, 0, 117, 115, 101, 32,
        99, 114, 97, 116, 101, 58, 58, 105, 110, 116, 101, 114, 110, 97, 108, 115, 58, 58, 112, 97,
        114, 115, 101, 114, 58, 58, 115, 112, 97, 110, 58, 58, 123, 83, 112, 97, 110, 125, 59, 10,
        117, 115, 101, 32, 99, 114, 97, 116, 101, 58, 58, 105, 110, 116, 101, 114, 110, 97, 108,
        115, 58, 58, 112, 97, 114, 115, 101, 114, 58, 58, 97, 115, 116, 58, 58, 105, 100, 101, 110,
        116, 58, 58, 123, 73, 100, 101, 110, 116, 125, 59, 10, 117, 115, 101, 32, 99, 114, 97, 116,
        101, 58, 58, 105, 110, 116, 101, 114, 110, 97, 108, 115, 58, 58, 112, 97, 114, 115, 101,
        114, 58, 58, 97, 115, 116, 58, 58, 105, 110, 118, 111, 107, 101, 58, 58, 123, 73, 110, 118,
        111, 107, 101, 125, 59, 10, 117, 115, 101, 32, 99, 114, 97, 116, 101, 58, 58, 105, 110,
        116, 101, 114, 110, 97, 108, 115, 58, 58, 112, 97, 114, 115, 101, 114, 58, 58, 97, 115,
        116, 58, 58, 101, 120, 112, 114, 58, 58, 123, 69, 120, 112, 114, 101, 115, 115, 105, 111,
        110, 125, 59, 10, 117, 115, 101, 32, 99, 114, 97, 116, 101, 58, 58, 105, 110, 116, 101,
        114, 110, 97, 108, 115, 58, 58, 112, 97, 114, 115, 101, 114, 58, 58, 97, 115, 116, 58, 58,
        116, 101, 109, 112, 108, 97, 116, 101, 58, 58, 123, 84, 101, 109, 112, 108, 97, 116, 101,
        44, 84, 101, 109, 112, 108, 97, 116, 101, 66, 101, 104, 97, 118, 105, 111, 114, 44, 84,
        101, 109, 112, 108, 97, 116, 101, 70, 97, 108, 108, 98, 97, 99, 107, 125, 59, 10, 117, 115,
        101, 32, 99, 114, 97, 116, 101, 58, 58, 105, 110, 116, 101, 114, 110, 97, 108, 115, 58, 58,
        112, 97, 114, 115, 101, 114, 58, 58, 97, 115, 116, 58, 58, 97, 115, 115, 105, 103, 110, 58,
        58, 123, 65, 115, 115, 105, 103, 110, 125, 59, 10, 9, 0, 0, 0, 0, 0, 0, 0, 0, 1, 45, 0, 0,
        0, 0, 0, 0, 0, 82, 101, 115, 117, 108, 116, 60, 69, 120, 112, 114, 101, 115, 115, 105, 111,
        110, 60, 39, 105, 110, 112, 117, 116, 62, 44, 108, 114, 112, 97, 114, 58, 58, 76, 101, 120,
        101, 109, 101, 60, 117, 51, 50, 62, 62, 1, 39, 0, 0, 0, 0, 0, 0, 0, 82, 101, 115, 117, 108,
        116, 60, 83, 112, 97, 110, 60, 39, 105, 110, 112, 117, 116, 62, 44, 108, 114, 112, 97, 114,
        58, 58, 76, 101, 120, 101, 109, 101, 60, 117, 51, 50, 62, 62, 1, 41, 0, 0, 0, 0, 0, 0, 0,
        82, 101, 115, 117, 108, 116, 60, 65, 115, 115, 105, 103, 110, 60, 39, 105, 110, 112, 117,
        116, 62, 44, 108, 114, 112, 97, 114, 58, 58, 76, 101, 120, 101, 109, 101, 60, 117, 51, 50,
        62, 62, 1, 41, 0, 0, 0, 0, 0, 0, 0, 82, 101, 115, 117, 108, 116, 60, 73, 110, 118, 111,
        107, 101, 60, 39, 105, 110, 112, 117, 116, 62, 44, 108, 114, 112, 97, 114, 58, 58, 76, 101,
        120, 101, 109, 101, 60, 117, 51, 50, 62, 62, 1, 50, 0, 0, 0, 0, 0, 0, 0, 82, 101, 115, 117,
        108, 116, 60, 86, 101, 99, 60, 69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 60, 39,
        105, 110, 112, 117, 116, 62, 62, 44, 108, 114, 112, 97, 114, 58, 58, 76, 101, 120, 101,
        109, 101, 60, 117, 51, 50, 62, 62, 1, 50, 0, 0, 0, 0, 0, 0, 0, 82, 101, 115, 117, 108, 116,
        60, 86, 101, 99, 60, 69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 60, 39, 105, 110,
        112, 117, 116, 62, 62, 44, 108, 114, 112, 97, 114, 58, 58, 76, 101, 120, 101, 109, 101, 60,
        117, 51, 50, 62, 62, 1, 40, 0, 0, 0, 0, 0, 0, 0, 82, 101, 115, 117, 108, 116, 60, 73, 100,
        101, 110, 116, 60, 39, 105, 110, 112, 117, 116, 62, 44, 108, 114, 112, 97, 114, 58, 58, 76,
        101, 120, 101, 109, 101, 60, 117, 51, 50, 62, 62, 1, 43, 0, 0, 0, 0, 0, 0, 0, 82, 101, 115,
        117, 108, 116, 60, 84, 101, 109, 112, 108, 97, 116, 101, 60, 39, 105, 110, 112, 117, 116,
        62, 44, 108, 114, 112, 97, 114, 58, 58, 76, 101, 120, 101, 109, 101, 60, 117, 51, 50, 62,
        62, 0,
    ];
    #[allow(dead_code)]
    const __SGRAPH_DATA: &[u8] = &[
        29, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0,
        0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 6,
        0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0,
        0, 17, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0,
        0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 8, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1,
        0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0,
        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 12,
        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
        0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 8, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 48, 8, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 1, 0, 0, 0, 12,
        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 8, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0,
        0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0,
        0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 8, 0,
        0, 0, 0, 0, 0, 6, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48,
        8, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
        0, 48, 8, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 48, 8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 12, 0,
        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        17, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0,
        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
        0, 0, 0, 0, 48, 8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 0,
        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 8, 0, 0, 0, 0,
        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
        0, 0, 0, 0, 48, 8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 12, 0,
        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 8, 0, 0, 0, 0,
        0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
        0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1,
        0, 0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 0, 0,
        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0,
        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0,
        12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0,
        0, 0, 0, 12, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 10,
        0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        48, 10, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 11, 0,
        0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 56, 15, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 56, 15, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 12, 0,
        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 8, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0,
        12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 8, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0,
        0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0,
        0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48,
        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
        0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1,
        0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0,
        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0,
        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0,
        12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0,
        0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0,
        0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0,
        11, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0,
        0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 0,
        0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        48, 8, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 48, 8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 2, 0, 0, 0, 12,
        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
        0, 6, 0, 0, 0, 2, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 8, 0, 0, 0,
        0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 2, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 2, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 2, 0, 0, 0, 12, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 2, 0, 0, 0, 12, 0,
        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 2, 0, 0,
        0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0,
        0, 0, 0, 0, 15, 0, 0, 0, 2, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48,
        10, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 2, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
        0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 2, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 2, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 2, 0, 0, 0, 12, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0,
        0, 1, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 8,
        0, 0, 0, 2, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 8, 0, 0, 0, 0, 0,
        0, 2, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 2, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 48, 8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 1, 0, 0, 0,
        12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
        0, 0, 10, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0,
        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 2, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1,
        0, 0, 0, 0, 0, 0, 0, 48, 8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 2, 0, 0,
        0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 8, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0,
        0, 0, 0, 14, 0, 0, 0, 3, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 10,
        0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 3, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        48, 10, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 3, 0, 0, 0, 12, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 3, 0, 0, 0, 12, 0,
        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0,
        0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0,
        0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 14, 0, 0,
        0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 15,
        0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0,
        0, 16, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0,
        0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 3, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 3, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0,
        0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 12, 0, 0,
        0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 12,
        0, 0, 0, 3, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0,
        0, 0, 13, 0, 0, 0, 3, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 10, 0,
        0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 2, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 3, 0, 0, 0, 12, 0, 0,
        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        16, 0, 0, 0, 3, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0,
        12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0,
        0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
        0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0,
        0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0,
        0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48,
        0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
        0, 48, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
        0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1,
        0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0,
        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 12, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 12,
        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
        0, 8, 0, 0, 0, 3, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 8, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 3, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 48, 8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 4, 0, 0, 0,
        12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 14, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 10,
        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 4,
        0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        48, 10, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 13, 0,
        0, 0, 4, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 3, 0, 0, 0, 12, 0,
        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        9, 0, 0, 0, 3, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0,
        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 5, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
        0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 5, 0, 0, 0, 12,
        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
        0, 15, 0, 0, 0, 5, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 10, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 5, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 5, 0, 0,
        0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
        0, 0, 0, 0, 12, 0, 0, 0, 5, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48,
        10, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 5, 0, 0, 0, 12, 0, 0, 0, 0, 0,
        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0,
        0, 5, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 0, 0, 0, 0,
        29, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 1, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 2, 0, 0, 0, 6, 0, 1, 0, 0, 0,
        7, 0, 0, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 5, 0, 1, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 0, 0,
        7, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0,
        9, 0, 0, 0, 0, 0, 5, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0,
        11, 0, 1, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        0, 0, 4, 0, 0, 0, 14, 0, 0, 0, 0, 0, 8, 0, 0, 0, 5, 0, 1, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0,
        0, 0, 6, 0, 0, 0, 12, 0, 0, 0, 0, 0, 1, 0, 0, 0, 13, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
        0, 0, 2, 0, 0, 0, 6, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 7, 0, 0, 0, 2, 0, 1, 0,
        0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 9, 0,
        0, 0, 17, 0, 1, 0, 0, 0, 10, 0, 0, 0, 15, 0, 1, 0, 0, 0, 8, 0, 0, 0, 16, 0, 2, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 18, 0, 1, 0, 0, 0, 4, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 20, 0, 1, 0, 0,
        0, 7, 0, 0, 0, 7, 0, 1, 0, 0, 0, 0, 0, 0, 0, 21, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8,
        0, 0, 0, 22, 0, 1, 0, 0, 0, 0, 0, 0, 0, 23, 0, 1, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 6, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
        0, 1, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 5, 0, 0, 0, 0, 0, 7, 0, 0, 0, 2,
        0, 1, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 24,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 9, 0, 0, 0, 25, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 1, 0, 0, 0, 9, 0, 0, 0, 26, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 9, 0, 0,
        0, 27, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 9, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0,
    ];
    #[allow(dead_code)]
    const __STABLE_DATA: &[u8] = &[
        29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0,
        0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 55, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 63,
        0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0,
        0, 65, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 40,
        0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0, 0,
        0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0,
        0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 1, 0, 0, 0, 0, 0, 0, 6,
        0, 0, 0, 0, 0, 0, 0, 62, 255, 124, 199, 247, 127, 207, 247, 124, 207, 247, 251, 199, 224,
        242, 207, 247, 143, 207, 255, 252, 207, 231, 247, 126, 255, 92, 62, 255, 124, 255, 253,
        223, 255, 253, 223, 207, 255, 92, 207, 245, 92, 207, 5, 0, 0, 0, 0, 91, 0, 0, 0, 0, 0, 0,
        0, 10, 0, 0, 0, 0, 0, 0, 0, 92, 157, 144, 203, 229, 2, 0, 10, 21, 131, 5, 133, 162, 228,
        114, 185, 211, 85, 133, 194, 78, 72, 145, 235, 227, 243, 233, 58, 58, 97, 87, 168, 77, 86,
        150, 249, 6, 62, 153, 172, 73, 220, 214, 182, 165, 37, 18, 155, 0, 1, 192, 96, 112, 56, 4,
        2, 68, 34, 143, 71, 163, 49, 0, 28, 169, 146, 77, 17, 192, 3, 208, 0, 0, 0, 0, 0, 0, 192,
        100, 82, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 1, 0, 0, 0, 0, 0, 0, 6, 0, 0,
        0, 0, 0, 0, 0, 193, 0, 131, 56, 8, 128, 48, 8, 131, 48, 8, 4, 56, 31, 13, 48, 8, 112, 48,
        0, 3, 48, 24, 8, 129, 0, 163, 193, 0, 131, 0, 2, 32, 0, 2, 32, 48, 0, 163, 48, 10, 163, 48,
        10, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 5,
        0, 0, 0, 0, 0, 0, 0, 105, 254, 127, 255, 255, 255, 255, 255, 191, 255, 83, 252, 255, 255,
        255, 255, 255, 127, 255, 254, 167, 249, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        31, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 194, 14, 49, 163,
        173, 2, 142, 3, 48, 3, 128, 2, 78, 54, 227, 214, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 10, 2, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 64, 0, 0, 0, 0, 1, 0,
        32, 0, 32, 0, 0, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 16, 0, 8, 0, 0, 0, 0, 0, 0, 0,
        4, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 8, 0, 4, 0, 32, 0, 0, 0, 0, 0,
        0, 0, 92, 1, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 193, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,
        4, 0, 16, 13, 0, 0, 112, 48, 0, 0, 0, 16, 8, 129, 0, 0, 193, 0, 0, 0, 2, 32, 0, 2, 32, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 114, 101,
        10, 31, 0, 0, 0, 0, 9, 0, 0, 0, 18, 0, 0, 0, 12, 0, 0, 0, 0, 3, 0,
    ];

    #[allow(dead_code)]
    pub fn parse<'lexer, 'input: 'lexer>(
        lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
    ) -> (
        ::std::option::Option<Result<Expression<'input>, lrpar::Lexeme<u32>>>,
        ::std::vec::Vec<::lrpar::LexParseError<u32>>,
    ) {
        let (grm, sgraph, stable) =
            ::lrpar::ctbuilder::_reconstitute(__GRM_DATA, __SGRAPH_DATA, __STABLE_DATA);
        #[allow(clippy::type_complexity)]
        let mut actions: ::std::vec::Vec<
            &dyn Fn(
                ::cfgrammar::RIdx<u32>,
                &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
                ::lrpar::Span,
                ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>,
            ) -> __GTActionsKind<'input>,
        > = ::std::vec::Vec::new();
        actions.push(&__gt_wrapper_0);
        actions.push(&__gt_wrapper_1);
        actions.push(&__gt_wrapper_2);
        actions.push(&__gt_wrapper_3);
        actions.push(&__gt_wrapper_4);
        actions.push(&__gt_wrapper_5);
        actions.push(&__gt_wrapper_6);
        actions.push(&__gt_wrapper_7);
        actions.push(&__gt_wrapper_8);
        actions.push(&__gt_wrapper_9);
        actions.push(&__gt_wrapper_10);
        actions.push(&__gt_wrapper_11);
        actions.push(&__gt_wrapper_12);
        actions.push(&__gt_wrapper_13);
        actions.push(&__gt_wrapper_14);
        actions.push(&__gt_wrapper_15);
        actions.push(&__gt_wrapper_16);
        actions.push(&__gt_wrapper_17);

        match ::lrpar::RTParserBuilder::new(&grm, &sgraph, &stable)
            .recoverer(::lrpar::RecoveryKind::None)
            .parse_actions(lexer, &actions)
        {
            (Some(__GTActionsKind::AK1(x)), y) => (Some(x), y),
            (None, y) => (None, y),
            _ => unreachable!(),
        }
    }

    #[allow(dead_code)]
    pub const R_EXPR: u32 = 1;
    #[allow(dead_code)]
    pub const R_NUM: u32 = 2;
    #[allow(dead_code)]
    pub const R_ASSIGNMENT: u32 = 3;
    #[allow(dead_code)]
    pub const R_FUNC: u32 = 4;
    #[allow(dead_code)]
    pub const R_FUNCARGS: u32 = 5;
    #[allow(dead_code)]
    pub const R_ARGLIST: u32 = 6;
    #[allow(dead_code)]
    pub const R_IDENTIFIER: u32 = 7;
    #[allow(dead_code)]
    pub const R_TEMPLATEVAR: u32 = 8;
    const __GT_EPP: &[::std::option::Option<&str>] = &[
        Some("NUM"),
        Some("LET"),
        Some("EQ"),
        Some("LPAR"),
        Some("RPAR"),
        Some("COMMA"),
        Some("IDENT"),
        Some("TEMPLATE_START"),
        Some("TEMPLATE_ASSIGN"),
        Some("RBRACE"),
        Some("TEMPLATE_FALLBACK"),
        None,
    ];

    /// Return the %epp entry for token `tidx` (where `None` indicates "the token has no
    /// pretty-printed value"). Panics if `tidx` doesn't exist.
    #[allow(dead_code)]
    pub fn token_epp<'a>(tidx: ::cfgrammar::TIdx<u32>) -> ::std::option::Option<&'a str> {
        __GT_EPP[usize::from(tidx)]
    }

    // Wrappers

    fn __gt_wrapper_0<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>,
    ) -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK4(x)) => x,
            _ => unreachable!(),
        };
        __GTActionsKind::AK1(__gt_action_0(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_1<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>,
    ) -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK2(x)) => x,
            _ => unreachable!(),
        };
        __GTActionsKind::AK1(__gt_action_1(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_2<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>,
    ) -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK7(x)) => x,
            _ => unreachable!(),
        };
        __GTActionsKind::AK1(__gt_action_2(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_3<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>,
    ) -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK8(x)) => x,
            _ => unreachable!(),
        };
        __GTActionsKind::AK1(__gt_action_3(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_4<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>,
    ) -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            }
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!(),
        };
        __GTActionsKind::AK2(__gt_action_4(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_5<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>,
    ) -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            }
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!(),
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK7(x)) => x,
            _ => unreachable!(),
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            }
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!(),
        };
        let __gt_arg_4 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK1(x)) => x,
            _ => unreachable!(),
        };
        __GTActionsKind::AK3(__gt_action_5(
            __gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3, __gt_arg_4,
        ))
    }

    fn __gt_wrapper_6<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>,
    ) -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK7(x)) => x,
            _ => unreachable!(),
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK5(x)) => x,
            _ => unreachable!(),
        };
        __GTActionsKind::AK4(__gt_action_6(
            __gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2,
        ))
    }

    fn __gt_wrapper_7<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>,
    ) -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            }
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!(),
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            }
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!(),
        };
        __GTActionsKind::AK5(__gt_action_7(
            __gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2,
        ))
    }

    fn __gt_wrapper_8<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>,
    ) -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            }
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!(),
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!(),
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            }
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!(),
        };
        __GTActionsKind::AK5(__gt_action_8(
            __gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3,
        ))
    }

    fn __gt_wrapper_9<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>,
    ) -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK6(x)) => x,
            _ => unreachable!(),
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            }
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!(),
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK1(x)) => x,
            _ => unreachable!(),
        };
        __GTActionsKind::AK6(__gt_action_9(
            __gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3,
        ))
    }

    fn __gt_wrapper_10<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>,
    ) -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK1(x)) => x,
            _ => unreachable!(),
        };
        __GTActionsKind::AK6(__gt_action_10(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_11<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>,
    ) -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            }
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!(),
        };
        __GTActionsKind::AK7(__gt_action_11(__gt_ridx, __gt_lexer, __gt_span, __gt_arg_1))
    }

    fn __gt_wrapper_12<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>,
    ) -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            }
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!(),
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK7(x)) => x,
            _ => unreachable!(),
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            }
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!(),
        };
        let __gt_arg_4 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK8(x)) => x,
            _ => unreachable!(),
        };
        let __gt_arg_5 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            }
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!(),
        };
        __GTActionsKind::AK8(__gt_action_12(
            __gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3, __gt_arg_4,
            __gt_arg_5,
        ))
    }

    fn __gt_wrapper_13<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>,
    ) -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            }
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!(),
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK7(x)) => x,
            _ => unreachable!(),
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            }
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!(),
        };
        let __gt_arg_4 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            }
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!(),
        };
        let __gt_arg_5 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            }
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!(),
        };
        __GTActionsKind::AK8(__gt_action_13(
            __gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3, __gt_arg_4,
            __gt_arg_5,
        ))
    }

    fn __gt_wrapper_14<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>,
    ) -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            }
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!(),
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK7(x)) => x,
            _ => unreachable!(),
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            }
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!(),
        };
        let __gt_arg_4 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK8(x)) => x,
            _ => unreachable!(),
        };
        let __gt_arg_5 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            }
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!(),
        };
        __GTActionsKind::AK8(__gt_action_14(
            __gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3, __gt_arg_4,
            __gt_arg_5,
        ))
    }

    fn __gt_wrapper_15<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>,
    ) -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            }
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!(),
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK7(x)) => x,
            _ => unreachable!(),
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            }
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!(),
        };
        let __gt_arg_4 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            }
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!(),
        };
        let __gt_arg_5 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            }
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!(),
        };
        __GTActionsKind::AK8(__gt_action_15(
            __gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3, __gt_arg_4,
            __gt_arg_5,
        ))
    }

    fn __gt_wrapper_16<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>,
    ) -> __GTActionsKind<'input> {
        let __gt_arg_1 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            }
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!(),
        };
        let __gt_arg_2 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::ActionType(__GTActionsKind::AK7(x)) => x,
            _ => unreachable!(),
        };
        let __gt_arg_3 = match __gt_args.next().unwrap() {
            ::lrpar::parser::AStackType::Lexeme(l) => {
                if l.inserted() {
                    Err(l)
                } else {
                    Ok(l)
                }
            }
            ::lrpar::parser::AStackType::ActionType(_) => unreachable!(),
        };
        __GTActionsKind::AK8(__gt_action_16(
            __gt_ridx, __gt_lexer, __gt_span, __gt_arg_1, __gt_arg_2, __gt_arg_3,
        ))
    }

    fn __gt_wrapper_17<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_args: ::std::vec::Drain<::lrpar::parser::AStackType<__GTActionsKind<'input>, u32>>,
    ) -> __GTActionsKind<'input> {
        unreachable!()
    }

    #[allow(dead_code)]
    enum __GTActionsKind<'input> {
        AK1(Result<Expression<'input>, lrpar::Lexeme<u32>>),
        AK2(Result<Span<'input>, lrpar::Lexeme<u32>>),
        AK3(Result<Assign<'input>, lrpar::Lexeme<u32>>),
        AK4(Result<Invoke<'input>, lrpar::Lexeme<u32>>),
        AK5(Result<Vec<Expression<'input>>, lrpar::Lexeme<u32>>),
        AK6(Result<Vec<Expression<'input>>, lrpar::Lexeme<u32>>),
        AK7(Result<Ident<'input>, lrpar::Lexeme<u32>>),
        AK8(Result<Template<'input>, lrpar::Lexeme<u32>>),
        ___GTActionsKindHidden(::std::marker::PhantomData<&'input ()>),
    }

    // User code from the program section

    use crate::internals::parser::ast::assign::Assign;
    use crate::internals::parser::ast::expr::Expression;
    use crate::internals::parser::ast::ident::Ident;
    use crate::internals::parser::ast::invoke::Invoke;
    use crate::internals::parser::ast::template::{Template, TemplateBehavior, TemplateFallback};
    use crate::internals::parser::span::Span;

    // User actions

    // Expr
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_0<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_arg_1: Result<Invoke<'input>, lrpar::Lexeme<u32>>,
    ) -> Result<Expression<'input>, lrpar::Lexeme<u32>> {
        Expression::invoke(__gt_arg_1?, Span::into(__gt_lexer, __gt_span))
    }

    // Expr
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_1<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_arg_1: Result<Span<'input>, lrpar::Lexeme<u32>>,
    ) -> Result<Expression<'input>, lrpar::Lexeme<u32>> {
        Expression::num(__gt_arg_1?, Span::into(__gt_lexer, __gt_span))
    }

    // Expr
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_2<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_arg_1: Result<Ident<'input>, lrpar::Lexeme<u32>>,
    ) -> Result<Expression<'input>, lrpar::Lexeme<u32>> {
        Expression::var(__gt_arg_1?, Span::into(__gt_lexer, __gt_span))
    }

    // Expr
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_3<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_arg_1: Result<Template<'input>, lrpar::Lexeme<u32>>,
    ) -> Result<Expression<'input>, lrpar::Lexeme<u32>> {
        Expression::template(__gt_arg_1?, Span::into(__gt_lexer, __gt_span))
    }

    // Num
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_4<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
    ) -> Result<Span<'input>, lrpar::Lexeme<u32>> {
        Ok(Span::new(__gt_lexer, None, __gt_span)?)
    }

    // Assignment
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_5<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
        mut __gt_arg_2: Result<Ident<'input>, lrpar::Lexeme<u32>>,
        mut __gt_arg_3: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
        mut __gt_arg_4: Result<Expression<'input>, lrpar::Lexeme<u32>>,
    ) -> Result<Assign<'input>, lrpar::Lexeme<u32>> {
        Assign::new(__gt_arg_2?, __gt_arg_4?, Span::into(__gt_lexer, __gt_span))
    }

    // Func
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_6<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_arg_1: Result<Ident<'input>, lrpar::Lexeme<u32>>,
        mut __gt_arg_2: Result<Vec<Expression<'input>>, lrpar::Lexeme<u32>>,
    ) -> Result<Invoke<'input>, lrpar::Lexeme<u32>> {
        Invoke::new(__gt_arg_1?, __gt_arg_2?, Span::into(__gt_lexer, __gt_span))
    }

    // FuncArgs
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_7<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
        mut __gt_arg_2: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
    ) -> Result<Vec<Expression<'input>>, lrpar::Lexeme<u32>> {
        Ok(Vec::new())
    }

    // FuncArgs
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_8<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
        mut __gt_arg_2: Result<Vec<Expression<'input>>, lrpar::Lexeme<u32>>,
        mut __gt_arg_3: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
    ) -> Result<Vec<Expression<'input>>, lrpar::Lexeme<u32>> {
        Ok(__gt_arg_2?)
    }

    // ArgList
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_9<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_arg_1: Result<Vec<Expression<'input>>, lrpar::Lexeme<u32>>,
        mut __gt_arg_2: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
        mut __gt_arg_3: Result<Expression<'input>, lrpar::Lexeme<u32>>,
    ) -> Result<Vec<Expression<'input>>, lrpar::Lexeme<u32>> {
        let mut v = __gt_arg_1?;
        v.push(__gt_arg_3?);
        Ok(v)
    }

    // ArgList
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_10<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_arg_1: Result<Expression<'input>, lrpar::Lexeme<u32>>,
    ) -> Result<Vec<Expression<'input>>, lrpar::Lexeme<u32>> {
        Ok(vec![__gt_arg_1?])
    }

    // Identifier
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_11<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
    ) -> Result<Ident<'input>, lrpar::Lexeme<u32>> {
        Ok(Ident::new(Span::new(__gt_lexer, None, __gt_span)?))
    }

    // TemplateVar
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_12<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
        mut __gt_arg_2: Result<Ident<'input>, lrpar::Lexeme<u32>>,
        mut __gt_arg_3: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
        mut __gt_arg_4: Result<Template<'input>, lrpar::Lexeme<u32>>,
        mut __gt_arg_5: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
    ) -> Result<Template<'input>, lrpar::Lexeme<u32>> {
        Ok(Template::new(
            __gt_arg_2?,
            Span::new(__gt_lexer, None, __gt_span)?,
            TemplateBehavior::assign(__gt_arg_4?),
        ))
    }

    // TemplateVar
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_13<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
        mut __gt_arg_2: Result<Ident<'input>, lrpar::Lexeme<u32>>,
        mut __gt_arg_3: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
        mut __gt_arg_4: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
        mut __gt_arg_5: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
    ) -> Result<Template<'input>, lrpar::Lexeme<u32>> {
        Ok(Template::new(
            __gt_arg_2?,
            Span::new(__gt_lexer, None, __gt_span)?,
            TemplateBehavior::assign(Span::new(__gt_lexer, __gt_arg_4, None)?),
        ))
    }

    // TemplateVar
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_14<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
        mut __gt_arg_2: Result<Ident<'input>, lrpar::Lexeme<u32>>,
        mut __gt_arg_3: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
        mut __gt_arg_4: Result<Template<'input>, lrpar::Lexeme<u32>>,
        mut __gt_arg_5: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
    ) -> Result<Template<'input>, lrpar::Lexeme<u32>> {
        Ok(Template::new(
            __gt_arg_2?,
            Span::new(__gt_lexer, None, __gt_span)?,
            TemplateBehavior::fallback(__gt_arg_4?),
        ))
    }

    // TemplateVar
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_15<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
        mut __gt_arg_2: Result<Ident<'input>, lrpar::Lexeme<u32>>,
        mut __gt_arg_3: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
        mut __gt_arg_4: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
        mut __gt_arg_5: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
    ) -> Result<Template<'input>, lrpar::Lexeme<u32>> {
        Ok(Template::new(
            __gt_arg_2?,
            Span::new(__gt_lexer, None, __gt_span)?,
            TemplateBehavior::fallback(Span::new(__gt_lexer, __gt_arg_4, None)?),
        ))
    }

    // TemplateVar
    #[allow(clippy::too_many_arguments)]
    fn __gt_action_16<'lexer, 'input: 'lexer>(
        __gt_ridx: ::cfgrammar::RIdx<u32>,
        __gt_lexer: &'lexer dyn ::lrpar::NonStreamingLexer<'input, u32>,
        __gt_span: ::lrpar::Span,
        mut __gt_arg_1: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
        mut __gt_arg_2: Result<Ident<'input>, lrpar::Lexeme<u32>>,
        mut __gt_arg_3: ::std::result::Result<::lrpar::Lexeme<u32>, ::lrpar::Lexeme<u32>>,
    ) -> Result<Template<'input>, lrpar::Lexeme<u32>> {
        Ok(Template::new(
            __gt_arg_2?,
            Span::new(__gt_lexer, None, __gt_span)?,
            None,
        ))
    }
}

/* CACHE INFORMATION
   Build time: "2020-05-28T18:26:33.263184078+00:00"
   Mod name: None
   Recoverer: None
   YaccKind: Some(Grmtools)
   Error on conflicts: true
   0 'NUM'
   1 'LET'
   2 'EQ'
   3 'LPAR'
   4 'RPAR'
   5 'COMMA'
   6 'IDENT'
   7 'TEMPLATE_START'
   8 'TEMPLATE_ASSIGN'
   9 'RBRACE'
   10 'TEMPLATE_FALLBACK'
   11 <unknown>
*/
